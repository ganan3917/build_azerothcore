name: build_azerothcore

on:
  workflow_dispatch:
    inputs:
      acore_repo:
        description: "AzerothCore仓库地址"
        required: true
        default: "https://github.com/liyunfan1223/azerothcore-wotlk.git"
        type: string
      acore_branch:
        description: "AzerothCore分支"
        required: true
        default: "Playerbot"
        type: string
      build_type:
        description: "编译类型"
        required: true
        default: "MinSizeRel"
        type: choice
        options: [Debug, Release, RelWithDebInfo, MinSizeRel]
      modules:
        description: "模块列表（格式：仓库地址 分支，每行一个）"
        required: false
        default: |
          https://github.com/liyunfan1223/mod-playerbots.git master
          https://github.com/azerothcore/mod-eluna.git master
          https://github.com/azerothcore/mod-learn-spells.git master
          https://github.com/azerothcore/mod-autobalance.git master
          https://github.com/azerothcore/mod-auto-revive.git master
        type: string
  push: { branches: ["main"] }
  schedule: [{ cron: "0 19 * * *" }]  # 上海时间凌晨3点（UTC+8）

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      # 统一默认参数，避免重复定义
      ACORE_REPO: ${{ github.event.inputs.acore_repo || 'https://github.com/liyunfan1223/azerothcore-wotlk.git' }}
      ACORE_BRANCH: ${{ github.event.inputs.acore_branch || 'Playerbot' }}
      BUILD_TYPE: ${{ github.event.inputs.build_type || 'MinSizeRel' }}
      MODULES_INPUT: ${{ github.event.inputs.modules || 'https://github.com/liyunfan1223/mod-playerbots.git master' }}
      MODULES_DIR: azerothcore/modules

    steps:
      - name: 检查架构（仅x86_64）
        run: |
          [ "$(uname -m)" = "x86_64" ] || { echo "❌ 仅支持x86_64架构"; exit 1; }
          echo "✅ 确认架构：x86_64"

      - name: 安装依赖
        run: |
          sudo apt update -y
          sudo apt install -y git cmake make gcc g++ clang libmysqlclient-dev libssl-dev \
            libbz2-dev libreadline-dev libncurses-dev libboost-all-dev libcurl4-openssl-dev

      - name: 生成时间戳
        id: ts
        run: |
          echo "utc=$(date -u +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          echo "sh=$(TZ='Asia/Shanghai' date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: 克隆核心仓库
        run: |
          echo "🔧 克隆仓库：$ACORE_REPO（分支：$ACORE_BRANCH）"
          git clone --depth 1 --branch "$ACORE_BRANCH" "$ACORE_REPO" azerothcore
          cd azerothcore && git submodule update --init --recursive

      - name: 拉取模块
        id: modules
        run: |
          mkdir -p "$MODULES_DIR"
          success=()
          failure=()
          
          echo "📦 处理模块列表..."
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            repo=$(echo "$line" | awk '{print $1}')
            branch=$(echo "$line" | awk '{print $2}')
            name=$(basename "$repo" .git)
            path="$MODULES_DIR/$name"
            
            if git clone --depth 1 --branch "$branch" "$repo" "$path"; then
              success+=("$name（$branch）")
            else
              failure+=("$name（$branch）")
              echo "⚠️ 模块 $name 拉取失败"
            fi
          done <<< "$MODULES_INPUT"
          
          echo "success=$(IFS=';'; echo "${success[*]}")" >> $GITHUB_OUTPUT
          echo "failure=$(IFS=';'; echo "${failure[*]}")" >> $GITHUB_OUTPUT

      - name: 配置CMake
        run: |
          mkdir -p azerothcore/build && cd azerothcore/build
          cmake ../ -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
            -DBUILD_SHARED_LIBS=OFF -DWITH_WARNINGS=1 \
            -DTOOLS_BUILD=all -DSCRIPTS=static -DMODULES=static

      - name: 编译安装
        run: |
          cd azerothcore/build
          echo "🚀 开始编译（$(nproc)核心）"
          make -j$(nproc) && make install

      - name: 打包产物
        id: package
        run: |
            tar -czvf acore-${{ steps.ts.outputs.utc }}.tar.gz -C azerothcore/install .
            echo "name=acore-${{ steps.ts.outputs.utc }}.tar.gz" >> $GITHUB_OUTPUT
            # 修正：用 du -b 输出字节数（无单位），仅保留纯数字
            echo "size=$(du -b ${{ steps.package.outputs.name }} | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: 输出到Annotations
        run: |
          # 单独获取带单位的大小用于显示
          human_size=$(du -h ${{ steps.package.outputs.name }} | awk '{print $1}')
          echo "::notice::📦 产物: ${{ steps.package.outputs.name }} (${human_size})" >&2
          
          # 格式化模块列表
          success=$(echo "${{ steps.modules.outputs.success }}" | tr ';' '\n')
          failure=$(echo "${{ steps.modules.outputs.failure }}" | tr ';' '\n')
          
          # 核心信息
          echo "::notice title=编译信息::" >&2
          echo "::notice::📦 产物: ${{ steps.package.outputs.name }} (${{ steps.package.outputs.size }})" >&2
          echo "::notice::🔗 来源: $ACORE_REPO ($ACORE_BRANCH)" >&2
          echo "::notice::🔨 类型: $BUILD_TYPE" >&2
          echo "::notice::⏰ 时间: UTC $utc / 上海 $sh" >&2
          
          # 模块信息
          [ -n "$success" ] && { echo "::notice::📌 成功模块:" >&2; echo "$success" | xargs -I{} echo "::notice::  - {}" >&2; }
          [ -z "$success" ] && echo "::notice::📌 无模块集成" >&2
          [ -n "$failure" ] && { echo "::warning::⚠️ 失败模块:" >&2; echo "$failure" | xargs -I{} echo "::warning::  - {}" >&2; }

      - name: 保存产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.name }}
          path: ${{ steps.package.outputs.name }}
          retention-days: 7
