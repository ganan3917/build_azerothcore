name: Build AzerothCore with VS2022

on:
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * *'  # 北京时间每天3点

env:
  AZEROTHCORE_REPO: "azerothcore/azerothcore-wotlk"
  AZEROTHCORE_BRANCH: "master"
  MODULES: "azerothcore/mod-ah-bot azerothcore/mod-eluna"
  SOURCE_DIR: "${{ github.workspace }}/azerothcore"
  BUILD_DIR: "${{ github.workspace }}/build"
  INSTALL_DIR: "${{ github.workspace }}/install"
  SOLUTION_NAME: "AzerothCore.sln"
  VS_VERSION: "Visual Studio 17 2022"
  PLATFORM: "x64"
  CONFIG: "Release"
  BOOST_VERSION: "1.89.0"
  BOOST_INSTALL_DIR: "C:/local/boost_1_89_0"  # 目标安装路径
  # 改为指定的Boost预编译exe下载地址
  BOOST_EXE_URL: "https://archives.boost.io/release/1.89.0/binaries/boost_1_89_0-msvc-14.3-64.exe"
  BOOST_EXE_NAME: "boost_installer.exe"  # 本地保存的exe文件名

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: 拉取AzerothCore源码
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AZEROTHCORE_REPO }}
          ref: ${{ env.AZEROTHCORE_BRANCH }}
          path: ${{ env.SOURCE_DIR }}
          submodules: recursive
          fetch-depth: 0

      - name: 拉取模块
        run: |
          $modulesPath = "${{ env.SOURCE_DIR }}\modules"
          if (-not (Test-Path $modulesPath)) { New-Item -ItemType Directory -Path $modulesPath -Force | Out-Null }
          
          foreach ($module in $env:MODULES -split ' ') {
            $moduleName = $module.Split('/')[-1]
            $targetPath = Join-Path $modulesPath $moduleName
            git clone "https://github.com/$module.git" $targetPath
          }
        shell: pwsh

      - name: 安装基础依赖（MySQL/OpenSSL）
        run: |
          # 安装Chocolatey包管理器
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # 安装MySQL和OpenSSL（版本兼容AzerothCore）
          choco install -y mysql --version=8.0.31
          choco install -y openssl --version=1.1.1q
          # 无需安装7zip（改用exe直接安装，无需解压源码）
        shell: pwsh

      - name: 下载并静默安装Boost 1.89.0（使用预编译exe）
        run: |
          # 1. 创建目标安装目录（确保目录存在，避免安装器报错）
          New-Item -ItemType Directory -Path "${{ env.BOOST_INSTALL_DIR }}" -Force | Out-Null
          
          # 2. 下载Boost安装exe
          Write-Host "正在下载Boost安装包: ${{ env.BOOST_EXE_URL }}"
          Invoke-WebRequest -Uri "${{ env.BOOST_EXE_URL }}" -OutFile "${{ env.BOOST_EXE_NAME }}" -UseBasicParsing
          
          # 3. 验证exe是否下载成功
          if (-not (Test-Path "${{ env.BOOST_EXE_NAME }}")) {
            Write-Error "Boost安装包下载失败！"
            exit 1
          }
          
          # 4. 静默安装（Boost exe安装器支持的参数：/S=静默，--prefix=指定安装路径）
          Write-Host "正在静默安装Boost到: ${{ env.BOOST_INSTALL_DIR }}"
          .\${{ env.BOOST_EXE_NAME }} /S --prefix="${{ env.BOOST_INSTALL_DIR }}"
          
          # 5. 验证安装结果（检查关键目录和文件）
          $boostIncludeDir = "${{ env.BOOST_INSTALL_DIR }}\include"
          $boostLibDir = "${{ env.BOOST_INSTALL_DIR }}\lib"
          if (-not (Test-Path $boostIncludeDir) -or -not (Test-Path $boostLibDir)) {
            Write-Error "Boost安装失败！缺少include或lib目录"
            exit 1
          } else {
            Write-Host "Boost安装成功！"
            Write-Host "Include目录: $boostIncludeDir"
            Write-Host "Lib目录: $boostLibDir"
          }
        shell: pwsh

      - name: 设置BOOST_ROOT系统环境变量
        run: |
          # 1. 设置当前会话环境变量（确保后续步骤生效）
          $env:BOOST_ROOT = "${{ env.BOOST_INSTALL_DIR }}"
          
          # 2. 设置系统级环境变量（持久化，/M表示系统级）
          setx BOOST_ROOT "${{ env.BOOST_INSTALL_DIR }}" /M
          
          # 3. 验证环境变量
          Write-Host "=== BOOST_ROOT 环境变量验证 ==="
          Write-Host "当前会话BOOST_ROOT: $env:BOOST_ROOT"
          Write-Host "系统BOOST_ROOT: $(Get-ItemProperty -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Environment' -Name BOOST_ROOT | Select-Object -ExpandProperty BOOST_ROOT)"
          
          # 4. 验证安装路径文件（确保版本正确）
          $versionFile = "${{ env.BOOST_INSTALL_DIR }}\include\boost\version.hpp"
          if (Test-Path $versionFile) {
            Write-Host "找到Boost版本文件: $versionFile"
            # 读取版本号（验证是否为1.89.0）
            $versionContent = Get-Content $versionFile -Raw
            if ($versionContent -match 'BOOST_LIB_VERSION "1_89_0"') {
              Write-Host "Boost版本验证成功: 1.89.0"
            } else {
              Write-Warning "Boost版本文件存在，但未匹配到1.89.0（可能版本错误）"
            }
          } else {
            Write-Error "未找到Boost版本文件: $versionFile"
            exit 1
          }
        shell: pwsh

      - name: 创建构建目录
        run: |
          New-Item -ItemType Directory -Path ${{ env.BUILD_DIR }} -Force | Out-Null
          New-Item -ItemType Directory -Path ${{ env.INSTALL_DIR }} -Force | Out-Null
        shell: pwsh

      - name: CMake生成解决方案（适配Boost 1.89.0预编译包）
        run: |
          cmake `
            -G "${{ env.VS_VERSION }}" `
            -A ${{ env.PLATFORM }} `
            -S "${{ env.SOURCE_DIR }}" `
            -B "${{ env.BUILD_DIR }}" `
            -DCMAKE_POLICY_DEFAULT_CMP0144=NEW `  # 启用BOOST_ROOT识别
            -DCMAKE_POLICY_DEFAULT_CMP0167=OLD `  # 兼容FindBoost模块（避免新版本CMake报错）
            -DBOOST_ROOT="${{ env.BOOST_INSTALL_DIR }}" `  # 显式指定Boost根路径
            -DBoost_INCLUDE_DIR="${{ env.BOOST_INSTALL_DIR }}\include" `  # 头文件路径（预编译包默认结构）
            -DBoost_LIBRARY_DIR="${{ env.BOOST_INSTALL_DIR }}\lib" `  # 库文件路径（预编译包默认结构）
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DCMAKE_BUILD_TYPE="${{ env.CONFIG }}" `
            -DBUILD_AZEROTHCORE_TESTS=OFF `
            -DSCRIPTS=static `
            -DTOOLS=ON `
            -DMYSQL_ADD_INCLUDE_PATH="C:\Program Files\MySQL\MySQL Server 8.0\include" `
            -DMYSQL_LIBRARY="C:\Program Files\MySQL\MySQL Server 8.0\lib\libmysql.lib" `
            -DOPENSSL_ROOT_DIR="C:\Program Files\OpenSSL-Win64"
        shell: pwsh
        # 关键说明：msvc-14.1的Boost预编译包可兼容VS2022（msvc-14.3），无需额外工具集配置

      - name: 使用VS2022构建解决方案
        run: |
          $solutionPath = Join-Path ${{ env.BUILD_DIR }} ${{ env.SOLUTION_NAME }}
          if (-not (Test-Path $solutionPath)) {
            Write-Error "CMake未生成解决方案文件: $solutionPath"
            exit 1
          }
          Write-Host "正在使用VS2022构建解决方案: $solutionPath"
          # 使用devenv.com构建，指定Release+x64配置，目标为INSTALL（输出到INSTALL_DIR）
          devenv.com $solutionPath /Build "${{ env.CONFIG }}|${{ env.PLATFORM }}" /Project INSTALL
        shell: pwsh

      - name: 打包构建产物
        run: |
          if (-not (Test-Path ${{ env.INSTALL_DIR }})) {
            Write-Error "构建产物目录不存在: ${{ env.INSTALL_DIR }}"
            exit 1
          }
          Write-Host "正在打包构建产物: ${{ env.INSTALL_DIR }}"
          Compress-Archive -Path ${{ env.INSTALL_DIR }}\* -DestinationPath "azerothcore_${{ env.CONFIG }}_v${{ env.BOOST_VERSION }}.zip" -Force
        shell: pwsh

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-windows-exe_boost-${{ env.BOOST_VERSION }}
          path: "azerothcore_${{ env.CONFIG }}_v${{ env.BOOST_VERSION }}.zip"
          retention-days: 14  # 产物保留14天
