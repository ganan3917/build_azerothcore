name: AzerothCore 编译工作流

on:
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * *'  # 北京时间每天3点（UTC+8）

env:
  AC_REPO: "https://github.com/azerothcore/azerothcore-wotlk.git"
  AC_BRANCH: "master"
  AC_MODULES: "https://github.com/azerothcore/mod-ah-bot.git https://github.com/azerothcore/mod-transmog.git"
  BUILD_DIR: "${{ github.workspace }}/build"
  INSTALL_DIR: "${{ github.workspace }}/install"
  # Boost配置（使用msvc预编译版）
  BOOST_VERSION: "1_89_0"
  BOOST_INSTALLER: "boost_${{ env.BOOST_VERSION }}-msvc-14.3-64.exe"
  BOOST_URL: "https://boostorg.jfrog.io/artifactory/main/release/1.89.0/binaries/${{ env.BOOST_INSTALLER }}"
  BOOST_INSTALL_DIR: "${{ github.workspace }}/boost"  # 安装目录

jobs:
  build:
    runs-on: windows-2022
    
    steps:
      - name: 检查系统环境
        run: |
          echo "系统信息: $env:OS"
          git --version
          cmake --version
          mysql --version
          vswhere -latest -property installationPath
        shell: pwsh
      
      - name: 配置环境变量
        run: |
          # 查找VS2022安装路径
          $vsPath = vswhere -latest -property installationPath
          echo "VS安装路径: $vsPath"
          
          # 配置VS环境变量
          echo "$vsPath\MSBuild\Current\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "$vsPath\VC\Tools\MSVC\14.34.31933\bin\Hostx64\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # 配置MySQL环境变量
          $mysqlPath = "C:\Program Files\MySQL\MySQL Server 8.0\bin"
          if (Test-Path $mysqlPath) {
            echo "$mysqlPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
        shell: pwsh
      
      - name: 下载并静默安装Boost
        run: |
          # 下载Boost安装器
          Invoke-WebRequest -Uri "${{ env.BOOST_URL }}" -OutFile "${{ env.BOOST_INSTALLER }}"
          
          # 确保安装目录存在
          New-Item -ItemType Directory -Path "${{ env.BOOST_INSTALL_DIR }}" -Force | Out-Null
          
          # 静默安装（/S 表示静默，/DIR 指定安装目录）
          .\${{ env.BOOST_INSTALLER }} /S /DIR="${{ env.BOOST_INSTALL_DIR }}"
          
          # 验证安装
          if (Test-Path "${{ env.BOOST_INSTALL_DIR }}/boost") {
            echo "Boost安装成功"
          } else {
            echo "Boost安装失败"
            exit 1
          }
          
          # 转换路径为/分隔（设置BOOST_ROOT环境变量）
          $boostRoot = "${{ env.BOOST_INSTALL_DIR }}".Replace('\', '/')
          echo "BOOST_ROOT=$boostRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh
      
      - name: 克隆AzerothCore源码
        run: |
          git clone --branch ${{ env.AC_BRANCH }} --recursive ${{ env.AC_REPO }} azerothcore
        shell: cmd
      
      - name: 安装模块
        run: |
          cd azerothcore/modules
          $modules = "${{ env.AC_MODULES }}".split()
          foreach ($module in $modules) {
            git clone $module
          }
        shell: pwsh
      
      - name: 创建构建目录
        run: |
          mkdir ${{ env.BUILD_DIR }}
          mkdir ${{ env.INSTALL_DIR }}
        shell: cmd
      
      - name: 运行CMake生成解决方案
        run: |
          cd ${{ env.BUILD_DIR }}
          # 使用转换后的BOOST_ROOT（/分隔路径）
          cmake -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DBOOST_ROOT="${{ env.BOOST_ROOT }}" `
            -DWITH_WARNINGS=ON `
            -DSCRIPTS=static `
            -DTOOLS=ON `
            ${{ github.workspace }}/azerothcore
        shell: pwsh
      
      - name: 使用VS2022编译
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild AzerothCore.sln /p:Configuration=Release /p:Platform=x64 /m
        shell: cmd
      
      - name: 安装编译结果
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild INSTALL.vcxproj /p:Configuration=Release /p:Platform=x64 /m
        shell: cmd
      
      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-build
          path: ${{ env.INSTALL_DIR }}
