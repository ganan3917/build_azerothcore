name: Build AzerothCore with VS2022

on:
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * *'  # 北京时间每天3点

env:
  AZEROTHCORE_REPO: "azerothcore/azerothcore-wotlk"
  AZEROTHCORE_BRANCH: "master"
  MODULES: "azerothcore/mod-ah-bot azerothcore/mod-eluna"
  SOURCE_DIR: "${{ github.workspace }}/azerothcore"  # 源码根目录（含CMakeLists.txt）
  BUILD_DIR: "${{ github.workspace }}/build"
  INSTALL_DIR: "${{ github.workspace }}/install"
  SOLUTION_NAME: "AzerothCore.sln"
  VS_VERSION: "Visual Studio 17 2022"
  PLATFORM: "x64"
  CONFIG: "Release"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: 拉取AzerothCore源码
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AZEROTHCORE_REPO }}
          ref: ${{ env.AZEROTHCORE_BRANCH }}
          path: ${{ env.SOURCE_DIR }}  # 确保源码拉到SOURCE_DIR指定的目录
          submodules: recursive
          fetch-depth: 0

      - name: 拉取模块
        run: |
          $modulesPath = "${{ env.SOURCE_DIR }}\modules"
          if (-not (Test-Path $modulesPath)) { New-Item -ItemType Directory -Path $modulesPath -Force | Out-Null }
          
          foreach ($module in $env:MODULES -split ' ') {
            $moduleName = $module.Split('/')[-1]
            $targetPath = Join-Path $modulesPath $moduleName
            git clone "https://github.com/$module.git" $targetPath
          }
        shell: pwsh

      - name: 安装依赖（MySQL/Boost/OpenSSL）
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          choco install -y mysql --version=8.0.31
          choco install -y openssl --version=1.1.1q
          choco install -y boost-msvc-14.3 --version=1.79.0
          choco install -y git
        shell: pwsh

      - name: 创建构建目录
        run: |
          New-Item -ItemType Directory -Path ${{ env.BUILD_DIR }} -Force | Out-Null
          New-Item -ItemType Directory -Path ${{ env.INSTALL_DIR }} -Force | Out-Null
        shell: pwsh

      - name: CMake生成VS2022解决方案（修复参数格式）
        run: |
          cmake `
            -G "${{ env.VS_VERSION }}" `
            -A ${{ env.PLATFORM }} `
            -S "${{ env.SOURCE_DIR }}" `
            -B "${{ env.BUILD_DIR }}" `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DCMAKE_BUILD_TYPE="${{ env.CONFIG }}" `
            -DBUILD_AZEROTHCORE_TESTS=OFF `
            -DSCRIPTS=static `
            -DTOOLS=ON `
            -DMYSQL_ADD_INCLUDE_PATH="C:\Program Files\MySQL\MySQL Server 8.0\include" `
            -DMYSQL_LIBRARY="C:\Program Files\MySQL\MySQL Server 8.0\lib\libmysql.lib" `
            -DOPENSSL_ROOT_DIR="C:\Program Files\OpenSSL-Win64" `
            -DBOOST_ROOT="C:\local\boost_1_79_0"
        shell: pwsh
        # 关键修复：确保每行末尾的反引号（`）后没有空格，否则PowerShell会解析失败

      - name: 使用VS2022构建解决方案
        run: |
          $solutionPath = Join-Path ${{ env.BUILD_DIR }} ${{ env.SOLUTION_NAME }}
          Write-Host "构建解决方案: $solutionPath"
          devenv.com $solutionPath /Build "${{ env.CONFIG }}|${{ env.PLATFORM }}" /Project INSTALL
        shell: pwsh

      - name: 打包构建产物
        run: |
          Compress-Archive -Path ${{ env.INSTALL_DIR }}\* -DestinationPath "azerothcore_${{ env.CONFIG }}.zip" -Force
        shell: pwsh

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-windows-exe
          path: "azerothcore_${{ env.CONFIG }}.zip"
          retention-days: 14
