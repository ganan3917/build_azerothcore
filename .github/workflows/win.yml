name: Build AzerothCore-WoTLK win

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'AzerothCore repository URL'
        required: true
        default: 'azerothcore/azerothcore-wotlk.git'
      branch:
        description: 'Branch to build'
        required: true
        default: 'master'
      modules:
        description: 'Modules to include (separated by |)'
        required: false
        default: ''

jobs:
  build:
    runs-on: windows-latest
    
    env:
      # 基础配置
      AC_REPO: ${{ github.event.inputs.repo }}
      AC_BRANCH: ${{ github.event.inputs.branch }}
      AC_MODULES: ${{ github.event.inputs.modules }}
      
      # 目录设置
      SOURCE_DIR: ${{ github.workspace }}/azerothcore
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_DIR: ${{ github.workspace }}/install
      BOOST_VERSION: 1.89.0
      # 新增：Boost安装目标路径
      BOOST_INSTALL_DIR: D:\boost\boost_1_89_0
      BOOST_DOWNLOAD_URL: https://archives.boost.io/release/1.89.0/binaries/boost_1_89_0-msvc-14.3-64.exe

    steps:
      - name: Checkout AzerothCore
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AC_REPO }}
          ref: ${{ env.AC_BRANCH }}
          path: ${{ env.SOURCE_DIR }}
          submodules: 'recursive'

      - name: Checkout Modules
        if: env.AC_MODULES != ''
        run: |
          $modules = $env:AC_MODULES -split '\|'
          foreach ($module in $modules) {
            $moduleName = $module.Split('/')[-1] -replace '\.git$', ''
            $modulePath = "${{ env.SOURCE_DIR }}\modules\$moduleName"
            Write-Host "Cloning module: $module to $modulePath"
            git clone $module $modulePath
          }
        shell: pwsh

      - name: Install Boost
        run: |
          # 1. 确保D盘临时目录存在（用于存放安装包）
          if (-not (Test-Path "D:\temp")) {
            New-Item -Path "D:\temp" -ItemType Directory -Force | Out-Null
            Write-Host "Created D:\temp for Boost installer"
          }
          
          # 2. 确保Boost最终安装目录的父目录存在
          $boostParentDir = Split-Path -Parent "${{ env.BOOST_INSTALL_DIR }}"
          if (-not (Test-Path $boostParentDir)) {
            New-Item -Path $boostParentDir -ItemType Directory -Force | Out-Null
            Write-Host "Created Boost parent directory: $boostParentDir"
          }
          
          # 3. 下载Boost安装器到D盘临时目录
          $installerPath = "D:\temp\boost_installer.exe"
          Write-Host "Downloading Boost from: ${{ env.BOOST_DOWNLOAD_URL }} to $installerPath"
          Invoke-WebRequest -Uri "${{ env.BOOST_DOWNLOAD_URL }}" -OutFile $installerPath -UseBasicParsing
          
          # 4. 验证下载文件
          if ((Get-Item $installerPath).Length -lt 1000000) {
            throw "Boost installer download failed (file too small). Check URL."
          }
          
          # 5. 静默安装到指定路径
          Write-Host "Installing Boost to: ${{ env.BOOST_INSTALL_DIR }}"
          Start-Process -FilePath $installerPath -ArgumentList "/VERYSILENT /DIR=`"${{ env.BOOST_INSTALL_DIR }}`"" -Wait -NoNewWindow
          
          # 6. 验证安装结果
          $includePath = "${{ env.BOOST_INSTALL_DIR }}\include"
          $libPath = "${{ env.BOOST_INSTALL_DIR }}\lib64-msvc-14.3"
          if (-not (Test-Path $includePath)) {
            throw "Boost include directory missing: $includePath"
          }
          if (-not (Test-Path $libPath)) {
            throw "Boost library directory missing: $libPath"
          }
          
          # 7. 设置BOOST_ROOT环境变量（使用正斜杠格式）
          $boostRootPosix = "${{ env.BOOST_INSTALL_DIR }}".Replace('\', '/')
          echo "BOOST_ROOT=$boostRootPosix" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Successfully set BOOST_ROOT to: $boostRootPosix"
        shell: pwsh

      - name: Configure CMake
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          
          cmake ${{ env.SOURCE_DIR }} `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DBOOST_ROOT="${{ env.BOOST_ROOT }}" `
            -DTOOLS=1 `
            -DSCRIPTS=1 `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      - name: Build with MSBuild
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild AzerothCore.sln /p:Configuration=Release /p:Platform=x64 /m /p:BuildInParallel=true
        shell: pwsh

      - name: Install
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild INSTALL.vcxproj /p:Configuration=Release /p:Platform=x64 /m
        shell: pwsh

      - name: Package Build
        run: |
          Compress-Archive -Path "${{ env.INSTALL_DIR }}\*" -DestinationPath "${{ github.workspace }}\azerothcore-build.zip"
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-wotlk-build
          path: ${{ github.workspace }}\azerothcore-build.zip
          retention-days: 7
