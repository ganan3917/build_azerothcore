name: Build AzerothCore with VS2022

on:
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * *'  # 北京时间每天3点

env:
  AZEROTHCORE_REPO: "azerothcore/azerothcore-wotlk"
  AZEROTHCORE_BRANCH: "master"
  MODULES: "azerothcore/mod-ah-bot azerothcore/mod-eluna"
  SOURCE_DIR: "${{ github.workspace }}/azerothcore"
  BUILD_DIR: "${{ github.workspace }}/build"
  INSTALL_DIR: "${{ github.workspace }}/install"
  SOLUTION_NAME: "AzerothCore.sln"
  VS_VERSION: "Visual Studio 17 2022"
  PLATFORM: "x64"
  CONFIG: "Release"
  BOOST_VERSION: "1.89.0"  # 升级到1.89.0
  BOOST_INSTALL_DIR: "C:/local/boost_1_89_0"  # 目标安装路径
  BOOST_URL: "https://boostorg.jfrog.io/artifactory/main/release/1.89.0/source/boost_1_89_0.zip"  # 1.89.0源码地址

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: 拉取AzerothCore源码
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AZEROTHCORE_REPO }}
          ref: ${{ env.AZEROTHCORE_BRANCH }}
          path: ${{ env.SOURCE_DIR }}
          submodules: recursive
          fetch-depth: 0

      - name: 拉取模块
        run: |
          $modulesPath = "${{ env.SOURCE_DIR }}\modules"
          if (-not (Test-Path $modulesPath)) { New-Item -ItemType Directory -Path $modulesPath -Force | Out-Null }
          
          foreach ($module in $env:MODULES -split ' ') {
            $moduleName = $module.Split('/')[-1]
            $targetPath = Join-Path $modulesPath $moduleName
            git clone "https://github.com/$module.git" $targetPath
          }
        shell: pwsh

      - name: 安装基础依赖（MySQL/OpenSSL）
        run: |
          # 安装Chocolatey包管理器
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # 安装MySQL和OpenSSL（版本兼容AzerothCore）
          choco install -y mysql --version=8.0.31
          choco install -y openssl --version=1.1.1q
          choco install -y 7zip  # 用于解压Boost源码
        shell: pwsh

      - name: 手动安装Boost 1.89.0到指定目录并编译
        run: |
          # 创建目标安装目录
          New-Item -ItemType Directory -Path "${{ env.BOOST_INSTALL_DIR }}" -Force | Out-Null
          
          # 下载Boost 1.89.0源码
          Invoke-WebRequest -Uri "${{ env.BOOST_URL }}" -OutFile "boost.zip"
          
          # 解压到临时目录（解压后文件夹名为boost_1_89_0）
          7z x boost.zip -o"${{ github.workspace }}\boost_temp" -y
          
          # 进入Boost源码目录
          $boostSrcDir = "${{ github.workspace }}\boost_temp\boost_1_89_0"
          Set-Location $boostSrcDir
          
          # 生成VS2022兼容的编译工具（msvc）
          .\bootstrap.bat msvc
          
          # 编译并安装到目标目录（指定VS2022工具集和x64架构）
          .\b2.exe `
            toolset=msvc-14.3 `  # VS2022对应工具集版本
            architecture=x86 `
            address-model=64 `  # 64位架构
            --prefix="${{ env.BOOST_INSTALL_DIR }}" `  # 安装路径
            --with-filesystem `
            --with-program_options `
            --with-iostreams `
            --with-regex `  # AzerothCore必需组件
            install
        shell: pwsh

      - name: 设置BOOST_ROOT系统环境变量
        run: |
          # 设置当前会话环境变量
          $env:BOOST_ROOT = "${{ env.BOOST_INSTALL_DIR }}"
          # 设置系统级环境变量（持久化）
          setx BOOST_ROOT "${{ env.BOOST_INSTALL_DIR }}" /M
          # 验证环境变量和路径
          Write-Host "当前BOOST_ROOT: $env:BOOST_ROOT"
          if (Test-Path "$env:BOOST_ROOT") {
            Write-Host "Boost安装目录验证成功: $env:BOOST_ROOT"
            Write-Host "目录内容: $(Get-ChildItem "$env:BOOST_ROOT" | Select-Object -ExpandProperty Name)"
          } else {
            Write-Error "Boost安装目录不存在: $env:BOOST_ROOT"
          }
        shell: pwsh

      - name: 创建构建目录
        run: |
          New-Item -ItemType Directory -Path ${{ env.BUILD_DIR }} -Force | Out-Null
          New-Item -ItemType Directory -Path ${{ env.INSTALL_DIR }} -Force | Out-Null
        shell: pwsh

      - name: CMake生成解决方案（适配Boost 1.89.0）
        run: |
          cmake `
            -G "${{ env.VS_VERSION }}" `
            -A ${{ env.PLATFORM }} `
            -S "${{ env.SOURCE_DIR }}" `
            -B "${{ env.BUILD_DIR }}" `
            -DCMAKE_POLICY_DEFAULT_CMP0144=NEW `  # 启用BOOST_ROOT识别
            -DCMAKE_POLICY_DEFAULT_CMP0167=OLD `  # 兼容FindBoost模块
            -DBOOST_ROOT="${{ env.BOOST_INSTALL_DIR }}" `  # 显式指定Boost路径
            -DBoost_INCLUDE_DIR="${{ env.BOOST_INSTALL_DIR }}/include" `  # 头文件路径
            -DBoost_LIBRARY_DIR="${{ env.BOOST_INSTALL_DIR }}/lib" `  # 库文件路径
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DCMAKE_BUILD_TYPE="${{ env.CONFIG }}" `
            -DBUILD_AZEROTHCORE_TESTS=OFF `
            -DSCRIPTS=static `
            -DTOOLS=ON `
            -DMYSQL_ADD_INCLUDE_PATH="C:\Program Files\MySQL\MySQL Server 8.0\include" `
            -DMYSQL_LIBRARY="C:\Program Files\MySQL\MySQL Server 8.0\lib\libmysql.lib" `
            -DOPENSSL_ROOT_DIR="C:\Program Files\OpenSSL-Win64"
        shell: pwsh

      - name: 使用VS2022构建解决方案
        run: |
          $solutionPath = Join-Path ${{ env.BUILD_DIR }} ${{ env.SOLUTION_NAME }}
          Write-Host "构建解决方案: $solutionPath"
          devenv.com $solutionPath /Build "${{ env.CONFIG }}|${{ env.PLATFORM }}" /Project INSTALL
        shell: pwsh

      - name: 打包构建产物
        run: |
          Compress-Archive -Path ${{ env.INSTALL_DIR }}\* -DestinationPath "azerothcore_${{ env.CONFIG }}.zip" -Force
        shell: pwsh

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-windows-exe
          path: "azerothcore_${{ env.CONFIG }}.zip"
          retention-days: 14
