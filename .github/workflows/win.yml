name: Build AzerothCore with VS2022

on:
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * *'  # 北京时间每天3点

env:
  AZEROTHCORE_REPO: "azerothcore/azerothcore-wotlk"
  AZEROTHCORE_BRANCH: "master"
  MODULES: "azerothcore/mod-ah-bot azerothcore/mod-eluna"
  SOURCE_DIR: "${{ github.workspace }}/azerothcore"
  BUILD_DIR: "${{ github.workspace }}/build"
  INSTALL_DIR: "${{ github.workspace }}/install"
  SOLUTION_NAME: "AzerothCore.sln"
  VS_VERSION: "Visual Studio 17 2022"
  PLATFORM: "x64"
  CONFIG: "Release"
  VCPKG_ROOT: "${{ github.workspace }}/vcpkg"  # vcpkg安装路径
  BOOST_VERSION: "1.79.0"  # 明确Boost版本

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: 拉取AzerothCore源码
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AZEROTHCORE_REPO }}
          ref: ${{ env.AZEROTHCORE_BRANCH }}
          path: ${{ env.SOURCE_DIR }}
          submodules: recursive
          fetch-depth: 0

      - name: 拉取模块
        run: |
          $modulesPath = "${{ env.SOURCE_DIR }}\modules"
          if (-not (Test-Path $modulesPath)) { New-Item -ItemType Directory -Path $modulesPath -Force | Out-Null }
          
          foreach ($module in $env:MODULES -split ' ') {
            $moduleName = $module.Split('/')[-1]
            $targetPath = Join-Path $modulesPath $moduleName
            git clone "https://github.com/$module.git" $targetPath
          }
        shell: pwsh

      - name: 安装vcpkg（用于可靠管理Boost等依赖）
        run: |
          git clone https://github.com/microsoft/vcpkg.git ${{ env.VCPKG_ROOT }}
          . "${{ env.VCPKG_ROOT }}/bootstrap-vcpkg.bat"
        shell: pwsh

      - name: 用vcpkg安装依赖（Boost/MySQL/OpenSSL）
        run: |
          # 安装Boost（指定版本和所需组件）
          ${{ env.VCPKG_ROOT }}/vcpkg install "boost:${{ env.PLATFORM }}-windows" `
            "boost-filesystem:${{ env.PLATFORM }}-windows" `
            "boost-program-options:${{ env.PLATFORM }}-windows" `
            "boost-iostreams:${{ env.PLATFORM }}-windows" `
            "boost-regex:${{ env.PLATFORM }}-windows" `
            --version=${{ env.BOOST_VERSION }}
          
          # 安装MySQL和OpenSSL
          ${{ env.VCPKG_ROOT }}/vcpkg install "mysql:${{ env.PLATFORM }}-windows" `
            "openssl:${{ env.PLATFORM }}-windows"
        shell: pwsh

      - name: 创建构建目录
        run: |
          New-Item -ItemType Directory -Path ${{ env.BUILD_DIR }} -Force | Out-Null
          New-Item -ItemType Directory -Path ${{ env.INSTALL_DIR }} -Force | Out-Null
        shell: pwsh

      - name: CMake生成解决方案（使用vcpkg工具链）
        run: |
          cmake `
            -G "${{ env.VS_VERSION }}" `
            -A ${{ env.PLATFORM }} `
            -S "${{ env.SOURCE_DIR }}" `
            -B "${{ env.BUILD_DIR }}" `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `  # 关键：使用vcpkg工具链
            -DCMAKE_POLICY_DEFAULT_CMP0144=NEW `
            -DCMAKE_POLICY_DEFAULT_CMP0167=OLD `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DCMAKE_BUILD_TYPE="${{ env.CONFIG }}" `
            -DBUILD_AZEROTHCORE_TESTS=OFF `
            -DSCRIPTS=static `
            -DTOOLS=ON
        shell: pwsh
        # 注意：vcpkg会自动处理依赖路径，无需手动指定MySQL/Boost/OpenSSL路径

      - name: 使用VS2022构建解决方案
        run: |
          $solutionPath = Join-Path ${{ env.BUILD_DIR }} ${{ env.SOLUTION_NAME }}
          Write-Host "构建解决方案: $solutionPath"
          devenv.com $solutionPath /Build "${{ env.CONFIG }}|${{ env.PLATFORM }}" /Project INSTALL
        shell: pwsh

      - name: 打包构建产物
        run: |
          Compress-Archive -Path ${{ env.INSTALL_DIR }}\* -DestinationPath "azerothcore_${{ env.CONFIG }}.zip" -Force
        shell: pwsh

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-windows-exe
          path: "azerothcore_${{ env.CONFIG }}.zip"
          retention-days: 14
