name: Build AzerothCore with VS2022

on:
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * *'  # 北京时间每天3点

env:
  AZEROTHCORE_REPO: "azerothcore/azerothcore-wotlk"
  AZEROTHCORE_BRANCH: "master"
  MODULES: "azerothcore/mod-ah-bot azerothcore/mod-eluna"
  SOURCE_DIR: "${{ github.workspace }}/azerothcore"
  BUILD_DIR: "${{ github.workspace }}/build"
  INSTALL_DIR: "${{ github.workspace }}/install"
  SOLUTION_NAME: "AzerothCore.sln"
  VS_VERSION: "Visual Studio 17 2022"
  PLATFORM: "x64"
  CONFIG: "Release"
  BOOST_VERSION: "1.89.0"
  BOOST_INSTALL_DIR: "C:/local/boost_1_89_0"
  BOOST_EXE_URL: "https://archives.boost.io/release/1.89.0/binaries/boost_1_89_0-msvc-14.3-64.exe"
  BOOST_EXE_NAME: "boost_installer.exe"
  
  # 新增: 各软件安装包信息
  MYSQL_URL: "https://dev.mysql.com/get/Downloads/MySQL-8.4/mysql-8.4.0-winx64.msi"
  MYSQL_EXE: "mysql-installer.msi"
  MYSQL_INSTALL_DIR: "C:/Program Files/MySQL/MySQL Server 8.4"
  
  GIT_URL: "https://github.com/git-for-windows/git/releases/download/v2.45.2.windows.1/Git-2.45.2-64-bit.exe"
  GIT_EXE: "git-installer.exe"
  GIT_INSTALL_DIR: "C:/Program Files/Git"
  
  CMAKE_URL: "https://github.com/Kitware/CMake/releases/download/v3.30.1/cmake-3.30.1-windows-x86_64.msi"
  CMAKE_EXE: "cmake-installer.msi"
  CMAKE_INSTALL_DIR: "C:/Program Files/CMake"
  
  OPENSSL_URL: "https://slproweb.com/download/Win64OpenSSL-3_0_14.exe"
  OPENSSL_EXE: "openssl-installer.exe"
  OPENSSL_INSTALL_DIR: "C:/Program Files/OpenSSL-Win64"

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: 卸载系统自带的冲突软件
        run: |
          # 函数: 卸载程序
          function Uninstall-Program {
            param([string]$DisplayName)
            
            $app = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like "*$DisplayName*" }
            if ($app) {
              Write-Host "正在卸载: $($app.Name)"
              $app.Uninstall() | Out-Null
              Start-Sleep -Seconds 10
            }
          }
          
          # 卸载可能存在的旧版本
          Uninstall-Program "MySQL"
          Uninstall-Program "Git"
          Uninstall-Program "CMake"
          Uninstall-Program "OpenSSL"
        shell: pwsh

      - name: 安装Git
        run: |
          # 下载安装包
          Invoke-WebRequest -Uri "${{ env.GIT_URL }}" -OutFile "${{ env.GIT_EXE }}" -UseBasicParsing
          
          # 静默安装
          Write-Host "安装Git..."
          Start-Process -FilePath ${{ env.GIT_EXE }} -ArgumentList "/verysilent /norestart /components=""icons,ext\reg\shellhere,assoc,assoc_sh""" -Wait
          
          # 检查安装并设置环境变量
          if (-not (Test-Path "${{ env.GIT_INSTALL_DIR }}")) {
            Write-Error "Git安装失败"
            exit 1
          }
          
          $gitBinPath = "${{ env.GIT_INSTALL_DIR }}\bin"
          $gitCmdPath = "${{ env.GIT_INSTALL_DIR }}\cmd"
          $envPath = [Environment]::GetEnvironmentVariable("Path", "Machine")
          
          if ($envPath -notlike "*$gitBinPath*") {
            Write-Host "添加Git到系统环境变量..."
            [Environment]::SetEnvironmentVariable("Path", "$envPath;$gitBinPath;$gitCmdPath", "Machine")
            $env:Path += ";$gitBinPath;$gitCmdPath"
          }
          
          # 验证安装
          git --version
        shell: pwsh

      - name: 安装CMake
        run: |
          # 下载安装包
          Invoke-WebRequest -Uri "${{ env.CMAKE_URL }}" -OutFile "${{ env.CMAKE_EXE }}" -UseBasicParsing
          
          # 静默安装
          Write-Host "安装CMake..."
          Start-Process -FilePath ${{ env.CMAKE_EXE }} -ArgumentList "/qn /norestart ADD_CMAKE_TO_PATH=System" -Wait
          
          # 检查安装并设置环境变量
          if (-not (Test-Path "${{ env.CMAKE_INSTALL_DIR }}")) {
            Write-Error "CMake安装失败"
            exit 1
          }
          
          $cmakeBinPath = "${{ env.CMAKE_INSTALL_DIR }}\bin"
          $envPath = [Environment]::GetEnvironmentVariable("Path", "Machine")
          
          if ($envPath -notlike "*$cmakeBinPath*") {
            Write-Host "添加CMake到系统环境变量..."
            [Environment]::SetEnvironmentVariable("Path", "$envPath;$cmakeBinPath", "Machine")
            $env:Path += ";$cmakeBinPath"
          }
          
          # 验证安装
          cmake --version
        shell: pwsh

      - name: 安装MySQL 8.4
        run: |
          # 下载安装包
          Invoke-WebRequest -Uri "${{ env.MYSQL_URL }}" -OutFile "${{ env.MYSQL_EXE }}" -UseBasicParsing
          
          # 静默安装
          Write-Host "安装MySQL..."
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i ${{ env.MYSQL_EXE }} /qn INSTALLDIR=""${{ env.MYSQL_INSTALL_DIR }}""" -Wait
          
          # 检查安装并设置环境变量
          if (-not (Test-Path "${{ env.MYSQL_INSTALL_DIR }}")) {
            Write-Error "MySQL安装失败"
            exit 1
          }
          
          $mysqlBinPath = "${{ env.MYSQL_INSTALL_DIR }}\bin"
          $envPath = [Environment]::GetEnvironmentVariable("Path", "Machine")
          
          if ($envPath -notlike "*$mysqlBinPath*") {
            Write-Host "添加MySQL到系统环境变量..."
            [Environment]::SetEnvironmentVariable("Path", "$envPath;$mysqlBinPath", "Machine")
            $env:Path += ";$mysqlBinPath"
          }
          
          # 验证安装
          mysql --version
        shell: pwsh

      - name: 安装OpenSSL
        run: |
          # 下载安装包
          Invoke-WebRequest -Uri "${{ env.OPENSSL_URL }}" -OutFile "${{ env.OPENSSL_EXE }}" -UseBasicParsing
          
          # 静默安装
          Write-Host "安装OpenSSL..."
          Start-Process -FilePath ${{ env.OPENSSL_EXE }} -ArgumentList "/S /verysilent /norestart /DIR=""${{ env.OPENSSL_INSTALL_DIR }}""" -Wait
          
          # 检查安装并设置环境变量
          if (-not (Test-Path "${{ env.OPENSSL_INSTALL_DIR }}")) {
            Write-Error "OpenSSL安装失败"
            exit 1
          }
          
          $opensslBinPath = "${{ env.OPENSSL_INSTALL_DIR }}\bin"
          $envPath = [Environment]::GetEnvironmentVariable("Path", "Machine")
          
          if ($envPath -notlike "*$opensslBinPath*") {
            Write-Host "添加OpenSSL到系统环境变量..."
            [Environment]::SetEnvironmentVariable("Path", "$envPath;$opensslBinPath", "Machine")
            $env:Path += ";$opensslBinPath"
          }
          
          # 验证安装
          openssl version
        shell: pwsh

      - name: 拉取AzerothCore源码
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AZEROTHCORE_REPO }}
          ref: ${{ env.AZEROTHCORE_BRANCH }}
          path: ${{ env.SOURCE_DIR }}
          submodules: recursive
          fetch-depth: 0

      - name: 拉取模块
        run: |
          $modulesPath = "${{ env.SOURCE_DIR }}\modules"
          if (-not (Test-Path $modulesPath)) {
            New-Item -ItemType Directory -Path $modulesPath -Force | Out-Null
          }
          
          foreach ($module in $env:MODULES -split ' ') {
            $moduleName = $module.Split('/')[-1]
            $targetPath = Join-Path $modulesPath $moduleName
            git clone "https://github.com/$module.git" $targetPath
          }
        shell: pwsh

      - name: 下载并静默安装Boost 1.89.0
        run: |
          New-Item -ItemType Directory -Path "${{ env.BOOST_INSTALL_DIR }}" -Force | Out-Null
          
          Write-Host "正在下载Boost安装包: ${{ env.BOOST_EXE_URL }}"
          Invoke-WebRequest -Uri "${{ env.BOOST_EXE_URL }}" -OutFile "${{ env.BOOST_EXE_NAME }}" -UseBasicParsing
          
          if (-not (Test-Path "${{ env.BOOST_EXE_NAME }}")) {
            Write-Error "Boost安装包下载失败！"
            exit 1
          }
          
          Write-Host "正在静默安装Boost到: ${{ env.BOOST_INSTALL_DIR }}"
          .\${{ env.BOOST_EXE_NAME }} /S --prefix="${{ env.BOOST_INSTALL_DIR }}"
          
          $boostIncludeDir = "${{ env.BOOST_INSTALL_DIR }}\include"
          $boostLibDir = "${{ env.BOOST_INSTALL_DIR }}\lib"
          if (-not (Test-Path $boostIncludeDir) -or -not (Test-Path $boostLibDir)) {
            Write-Error "Boost安装失败！缺少include或lib目录"
            exit 1
          } else {
            Write-Host "Boost安装成功！"
          }
        shell: pwsh

      - name: 设置BOOST_ROOT系统环境变量
        run: |
          $env:BOOST_ROOT = "${{ env.BOOST_INSTALL_DIR }}"
          setx BOOST_ROOT "${{ env.BOOST_INSTALL_DIR }}" /M
          
          Write-Host "BOOST_ROOT 环境变量: $env:BOOST_ROOT"
          
          $versionFile = "${{ env.BOOST_INSTALL_DIR }}\include\boost\version.hpp"
          if (Test-Path $versionFile) {
            Write-Host "找到Boost版本文件: $versionFile"
            $versionContent = Get-Content $versionFile -Raw
            if ($versionContent -match 'BOOST_LIB_VERSION "1_89_0"') {
              Write-Host "Boost版本验证成功: 1.89.0"
            } else {
              Write-Warning "Boost版本不匹配"
            }
          } else {
            Write-Error "未找到Boost版本文件"
            exit 1
          }
        shell: pwsh

      - name: 创建构建目录
        run: |
          New-Item -ItemType Directory -Path ${{ env.BUILD_DIR }} -Force | Out-Null
          New-Item -ItemType Directory -Path ${{ env.INSTALL_DIR }} -Force | Out-Null
        shell: pwsh

      - name: CMake生成解决方案
        run: |
          cmake `
            -G "${{ env.VS_VERSION }}" `
            -A ${{ env.PLATFORM }} `
            -S "${{ env.SOURCE_DIR }}" `
            -B "${{ env.BUILD_DIR }}" `
            -DCMAKE_POLICY_DEFAULT_CMP0144=NEW `
            -DCMAKE_POLICY_DEFAULT_CMP0167=OLD `
            -DBOOST_ROOT="${{ env.BOOST_INSTALL_DIR }}" `
            -DBoost_INCLUDE_DIR="${{ env.BOOST_INSTALL_DIR }}\include" `
            -DBoost_LIBRARY_DIR="${{ env.BOOST_INSTALL_DIR }}\lib" `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DCMAKE_BUILD_TYPE="${{ env.CONFIG }}" `
            -DBUILD_AZEROTHCORE_TESTS=OFF `
            -DSCRIPTS=static `
            -DTOOLS=ON `
            -DMYSQL_ADD_INCLUDE_PATH="${{ env.MYSQL_INSTALL_DIR }}\include" `
            -DMYSQL_LIBRARY="${{ env.MYSQL_INSTALL_DIR }}\lib\libmysql.lib" `
            -DOPENSSL_ROOT_DIR="${{ env.OPENSSL_INSTALL_DIR }}"
        shell: pwsh

      - name: 使用VS2022构建解决方案
        run: |
          $solutionPath = Join-Path ${{ env.BUILD_DIR }} ${{ env.SOLUTION_NAME }}
          if (-not (Test-Path $solutionPath)) {
            Write-Error "CMake未生成解决方案文件: $solutionPath"
            exit 1
          }
          Write-Host "正在使用VS2022构建解决方案: $solutionPath"
          msbuild $solutionPath /p:Configuration=${{ env.CONFIG }};Platform=${{ env.PLATFORM }} /t:INSTALL /m
        shell: pwsh

      - name: 打包构建产物
        run: |
          if (-not (Test-Path ${{ env.INSTALL_DIR }})) {
            Write-Error "构建产物目录不存在: ${{ env.INSTALL_DIR }}"
            exit 1
          }
          Write-Host "正在打包构建产物: ${{ env.INSTALL_DIR }}"
          Compress-Archive -Path ${{ env.INSTALL_DIR }}\* -DestinationPath "azerothcore_${{ env.CONFIG }}_v${{ env.BOOST_VERSION }}.zip" -Force
        shell: pwsh

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-windows-exe_boost-${{ env.BOOST_VERSION }}
          path: "azerothcore_${{ env.CONFIG }}_v${{ env.BOOST_VERSION }}.zip"
          retention-days: 14
