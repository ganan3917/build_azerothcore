name: AzerothCore 编译工作流

on:
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * *'  # 北京时间每天3点（UTC+8）

env:
  AC_REPO: "https://github.com/azerothcore/azerothcore-wotlk.git"
  AC_BRANCH: "master"
  AC_MODULES: "https://github.com/azerothcore/mod-ah-bot.git https://github.com/azerothcore/mod-transmog.git"
  BUILD_DIR: "${{ github.workspace }}/build"
  INSTALL_DIR: "${{ github.workspace }}/install"
  # Boost源码配置
  BOOST_URL: "https://archives.boost.io/release/1.89.0/source/boost_1_89_0.tar.gz"
  BOOST_SOURCE_DIR: "${{ github.workspace }}/boost-src"  # 源码解压目录
  BOOST_INSTALL_DIR: "${{ github.workspace }}/boost"     # 安装目录

jobs:
  build:
    runs-on: windows-2022
    
    steps:
      - name: 检查系统环境
        run: |
          echo "系统信息: $env:OS"
          git --version
          cmake --version
          mysql --version
          vswhere -latest -property installationPath
        shell: pwsh
      
      - name: 配置环境变量（VS2022和工具链）
        run: |
          # 获取VS2022安装路径
          $vsPath = vswhere -latest -property installationPath
          echo "VS安装路径: $vsPath"
          
          # 加载VS环境变量（确保cl.exe、link.exe等编译器可用）
          & "$vsPath\VC\Auxiliary\Build\vcvars64.bat"
          
          # 将VS工具链添加到PATH
          echo "$vsPath\MSBuild\Current\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "$vsPath\VC\Tools\MSVC\14.38.33130\bin\Hostx64\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          # 配置MySQL路径
          $mysqlPath = "C:\Program Files\MySQL\MySQL Server 8.0\bin"
          if (Test-Path $mysqlPath) {
            echo "$mysqlPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
        shell: pwsh
      
      - name: 缓存Boost源码和编译结果
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.BOOST_SOURCE_DIR }}
            ${{ env.BOOST_INSTALL_DIR }}
          key: boost-1.89.0-src-windows-x64
      
      - name: 下载并解压Boost源码
        run: |
          if (-not (Test-Path "${{ env.BOOST_SOURCE_DIR }}")) {
            # 下载源码包
            Invoke-WebRequest -Uri "${{ env.BOOST_URL }}" -OutFile "boost.tar.gz"
            
            # 创建源码目录
            New-Item -ItemType Directory -Path "${{ env.BOOST_SOURCE_DIR }}" -Force | Out-Null
            
            # 解压（Windows需要7zip支持，GitHub Actions镜像已预装）
            7z x boost.tar.gz -o"${{ env.BOOST_SOURCE_DIR }}"
            7z x "${{ env.BOOST_SOURCE_DIR }}\boost_1_89_0.tar" -o"${{ env.BOOST_SOURCE_DIR }}"
            
            # 移动到源码目录（去除版本号前缀）
            Move-Item -Path "${{ env.BOOST_SOURCE_DIR }}\boost_1_89_0\*" -Destination "${{ env.BOOST_SOURCE_DIR }}"
          } else {
            echo "使用缓存的Boost源码"
          }
        shell: pwsh
      
      - name: 编译并安装Boost
        run: |
          # 进入Boost源码目录
          cd "${{ env.BOOST_SOURCE_DIR }}"
          
          # 仅在未安装时执行编译
          if (-not (Test-Path "${{ env.BOOST_INSTALL_DIR }}\include\boost")) {
            # 初始化Boost构建系统（生成b2.exe）
            .\bootstrap.bat msvc
            
            # 使用b2编译并安装（针对x64架构，Release模式）
            .\b2.exe `
              --build-dir="${{ env.BOOST_SOURCE_DIR }}\build" `
              --prefix="${{ env.BOOST_INSTALL_DIR }}" `
              toolset=msvc-14.3 `
              architecture=x86 `
              address-model=64 `
              variant=release `
              link=static `
              threading=multi `
              runtime-link=shared `
              --with-system `
              --with-filesystem `
              --with-thread `
              --with-date_time `
              --with-program_options `
              --with-iostreams `
              install
          } else {
            echo "使用缓存的Boost编译结果"
          }
          
          # 转换路径为/分隔，设置BOOST_ROOT环境变量
          $boostRoot = "${{ env.BOOST_INSTALL_DIR }}".Replace('\', '/')
          echo "BOOST_ROOT=$boostRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh
      
      - name: 克隆AzerothCore源码
        run: |
          git clone --branch ${{ env.AC_BRANCH }} --recursive ${{ env.AC_REPO }} azerothcore
        shell: cmd
      
      - name: 安装模块
        run: |
          cd azerothcore/modules
          $modules = "${{ env.AC_MODULES }}".Split()
          foreach ($module in $modules) {
            git clone $module
          }
        shell: pwsh
      
      - name: 创建构建目录
        run: |
          mkdir ${{ env.BUILD_DIR }}
          mkdir ${{ env.INSTALL_DIR }}
        shell: cmd
      
      - name: 运行CMake生成解决方案
        run: |
          cd ${{ env.BUILD_DIR }}
          cmake -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DBOOST_ROOT="${{ env.BOOST_ROOT }}" `
            -DWITH_WARNINGS=ON `
            -DSCRIPTS=static `
            -DTOOLS=ON `
            -DENABLE_EXTRA_LOGS=OFF `
            -DUSE_SCRIPTPCH=ON `
            ${{ github.workspace }}/azerothcore
        shell: pwsh
      
      - name: 使用VS2022编译
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild AzerothCore.sln /p:Configuration=Release /p:Platform=x64 /m /flp:LogFile=compile.log
        shell: cmd
        continue-on-error: false
      
      - name: 安装编译结果
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild INSTALL.vcxproj /p:Configuration=Release /p:Platform=x64 /m
        shell: cmd
      
      - name: 上传编译日志（失败时）
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compile-logs
          path: ${{ env.BUILD_DIR }}/compile.log
      
      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-build
          path: ${{ env.INSTALL_DIR }}
