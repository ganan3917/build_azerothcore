name: Build AzerothCore-WoTLK win

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'AzerothCore repository URL'
        required: true
        default: 'azerothcore/azerothcore-wotlk.git'
      branch:
        description: 'Branch to build'
        required: true
        default: 'master'
      modules:
        description: 'Modules to include (separated by |)'
        required: false
        default: ''

jobs:
  build:
    runs-on: windows-latest
    
    env:
      # 基础配置
      AC_REPO: ${{ github.event.inputs.repo }}
      AC_BRANCH: ${{ github.event.inputs.branch }}
      AC_MODULES: ${{ github.event.inputs.modules }}
      
      # 目录设置
      SOURCE_DIR: ${{ github.workspace }}/azerothcore
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_DIR: ${{ github.workspace }}/install
      # Boost配置
      BOOST_INSTALL_DIR: D:\boost\boost_1_89_0
      BOOST_DOWNLOAD_URL: https://archives.boost.io/release/1.89.0/binaries/boost_1_89_0-msvc-14.3-64.exe

    steps:
      - name: Checkout AzerothCore
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AC_REPO }}
          ref: ${{ env.AC_BRANCH }}
          path: ${{ env.SOURCE_DIR }}
          submodules: 'recursive'

      - name: Checkout Modules
        if: env.AC_MODULES != ''
        run: |
          $modules = $env:AC_MODULES -split '\|'
          foreach ($module in $modules) {
            $moduleName = $module.Split('/')[-1] -replace '\.git$', ''
            $modulePath = "${{ env.SOURCE_DIR }}\modules\$moduleName"
            Write-Host "Cloning module: $module to $modulePath"
            git clone $module $modulePath
          }
        shell: pwsh

      - name: Install Boost
        run: |
          # 强制创建D:\temp目录
          New-Item -Path "D:\temp" -ItemType Directory -Force | Out-Null
          Write-Host "Ensured D:\temp exists"
          
          # 下载Boost安装器
          $installerPath = "D:\temp\boost_installer.exe"
          Write-Host "Downloading Boost from: ${{ env.BOOST_DOWNLOAD_URL }}"
          Invoke-WebRequest -Uri "${{ env.BOOST_DOWNLOAD_URL }}" -OutFile $installerPath -UseBasicParsing
          
          # 静默安装
          Write-Host "Installing Boost to: ${{ env.BOOST_INSTALL_DIR }}"
          Start-Process -FilePath $installerPath -ArgumentList "/VERYSILENT /DIR=`"${{ env.BOOST_INSTALL_DIR }}`"" -Wait -NoNewWindow
          
          # 设置BOOST_ROOT环境变量
          $boostRootPosix = "${{ env.BOOST_INSTALL_DIR }}".Replace('\', '/')
          echo "BOOST_ROOT=$boostRootPosix" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Set BOOST_ROOT to: $boostRootPosix"
        shell: pwsh

      - name: Configure CMake
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          
          cmake ${{ env.SOURCE_DIR }} `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DBOOST_ROOT="${{ env.BOOST_ROOT }}" `
            -DTOOLS=1 `
            -DSCRIPTS=static
        shell: pwsh

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build with MSBuild
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild AzerothCore.sln /p:Configuration=Release /p:Platform=x64 /m /p:BuildInParallel=true
        shell: pwsh

      - name: 获取当前时间戳
        id: ts
        run: |
          $utc = Get-Date -UTC -Format "yyyyMMddHHmmss"
          $sh = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          echo "utc=$utc" >> $env:GITHUB_OUTPUT
          echo "sh=$sh" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: 用7zip打包文件
        id: package
        run: |
          $sourceDir = "${{ env.BUILD_DIR }}\bin\Release"
          $outputName = "acore-${{ steps.ts.outputs.utc }}.zip"
          
          # 确保输出目录存在
          New-Item -Path (Split-Path $outputName -Parent) -ItemType Directory -Force | Out-Null
          
          # 使用7zip压缩（-tzip指定zip格式，-r递归包含所有文件）
          7z a -tzip $outputName "$sourceDir\*"
          
          echo "name=$outputName" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: 创建Release并上传
        uses: ncipollo/release-action@v1
        with:
          tag: "Azerothcore-Wotlk_Win-x64_${{ steps.ts.outputs.utc }}"
          name: "Auto Build Azerothcore-Wotlk_Winx64 ${{ steps.ts.outputs.sh }}"
          body: |
            ### Auto Build Azerothcore-Wotlk_Winx64
            - 核心分支：${{ env.AC_BRANCH }}
            - 包含模块：${{ env.AC_MODULES || '无' }}
          artifacts: "${{ steps.package.outputs.name }}"
          token: ${{ secrets.BUILD_AZEROTHCORE }}
          replacesArtifacts: true

      - name: 保留最新3个Release
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.BUILD_AZEROTHCORE }}
