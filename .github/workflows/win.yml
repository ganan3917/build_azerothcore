name: 编译AzerothCore（无模块）(Windows)

# 环境变量：配置仓库、分支、输出目录
env:
  # 目标仓库地址（默认官方仓库，可替换为自己的fork）
  REPO_URL: "https://github.com/azerothcore/azerothcore-wotlk.git"
  # 目标分支（如main、dev等）
  BRANCH: "main"
  # 编译输出目录
  INSTALL_DIR: "./install"


# 触发条件：手动触发 + 推送到指定分支 + 北京时间凌晨3点自动运行
on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"  # 北京时间每天凌晨3点（UTC+8=北京时间，UTC时间19:00）


jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      # 1. 拉取指定仓库和分支的代码
      - name: 拉取源码（指定仓库和分支）
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.repository.full_name }}
          ref: ${{ env.BRANCH }}
          submodules: false  # 不自动拉取子模块，后续手动处理核心依赖
          fetch-depth: 0

      # 2. 拉取所有核心子模块（仅保留AzerothCore必要依赖，不含自定义模块）
      - name: 拉取核心子模块（dep等必要依赖）
        run: |
          # 递归拉取所有核心子模块（包括dep、src依赖等，无需单独指定模块）
          git submodule update --init --recursive

      # 3. 安装编译依赖
      - name: 安装依赖（MySQL/OpenSSL等）
        run: |
          choco install -y cmake mysql connector-cpp openssl zlib
          echo "C:\Program Files\MySQL\MySQL Connector C++ 8.0\lib64" >> $env:GITHUB_PATH
          echo "C:\Program Files\OpenSSL-Win64\lib" >> $env:GITHUB_PATH

      # 4. 配置VS2022 x64环境
      - name: 初始化VS2022环境
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # 5. 生成VS2022解决方案
      - name: 生成解决方案
        run: |
          mkdir build
          cd build
          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} `
            -DCMAKE_BUILD_TYPE=Release `
            -DAC_USE_STD_MALLOC=ON `
            -DENABLE_MYSQL_SSL=ON `
            -DTOOLS_BUILD=ON `
            -DSCRIPTS=static

      # 6. 使用MSBuild编译解决方案
      - name: 编译项目
        run: |
          $slnPath = ".\build\AzerothCore.sln"
          msbuild $slnPath `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /m

      # 7. 安装编译结果到指定目录
      - name: 安装输出文件
        run: |
          cd build
          cmake --install . --config Release

      # 8. 打包编译产物
      - name: 压缩结果
        run: |
          7z a -tzip azerothcore-${{ env.BRANCH }}-win64.zip ${{ env.INSTALL_DIR }}\*

      # 9. 上传产物
      - name: 上传编译结果
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-${{ env.BRANCH }}-exe
          path: azerothcore-${{ env.BRANCH }}-win64.zip
          retention-days: 14
