name: 编译AzerothCore（Windows-带Boost配置）

env:
  REPO: "azerothcore/azerothcore-wotlk"
  BRANCH: "main"
  INSTALL_DIR: "./install"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ github.workspace }}

    steps:
      - name: 拉取源码及核心子模块
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.BRANCH }}
          submodules: recursive
          fetch-depth: 0
          clean: true

      - name: 安装必要依赖（含最新版Boost）
        run: |
          # 安装cmake、zlib和最新版Boost
          choco install -y `
            cmake `
            zlib `
            boost `  # 安装最新版Boost C++
            --no-progress
          
          # 动态查找Boost安装根目录（Chocolatey通常安装在lib/boost下）
          $boostRoot = Get-ChildItem -Path "C:\ProgramData\chocolatey\lib\boost" `
            -Recurse -Filter "boost" `  # 查找包含boost核心目录的路径
            | Where-Object { $_.FullName -match "boost\\tools\\boost$" -or $_.FullName -match "boost$" } `
            | Select-Object -First 1 -ExpandProperty FullName
          
          if (-not $boostRoot) {
            Write-Error "未找到Boost安装目录，请检查Chocolatey安装是否成功"
            exit 1
          }
          
          # 设置BOOST_ROOT环境变量（供后续CMake使用）
          echo "BOOST_ROOT=$boostRoot" >> $env:GITHUB_ENV
          Write-Host "已设置BOOST_ROOT: $boostRoot"

      - name: 初始化VS2022 x64编译环境
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          toolset: 143

      - name: 生成VS2022解决方案（指定Boost路径）
        run: |
          mkdir -Force build | Out-Null
          cd build
          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DCMAKE_BUILD_TYPE=Release `
            -DAC_USE_STD_MALLOC=ON `
            -DTOOLS_BUILD=ON `
            -DSCRIPTS=static `
            -DBOOST_ROOT="${{ env.BOOST_ROOT }}"  # 显式指定Boost路径
          if (-not (Test-Path "AzerothCore.sln")) {
            Write-Error "CMake生成解决方案失败，未找到AzerothCore.sln"
            exit 1
          }

      - name: 用MSBuild编译项目
        run: |
          $slnPath = "./build/AzerothCore.sln"
          msbuild $slnPath `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /p:VisualStudioVersion=17.0 `
            /m `
            /nologo `
            /fl:msbuild.log
          if (-not (Test-Path "./build/bin/Release/authserver.exe")) {
            Write-Error "authserver.exe编译失败，未找到文件"
            exit 1
          }
          if (-not (Test-Path "./build/bin/Release/worldserver.exe")) {
            Write-Error "worldserver.exe编译失败，未找到文件"
            exit 1
          }

      - name: 安装编译结果
        run: |
          cd build
          cmake --install . --config Release
          if (-not (Test-Path "${{ env.INSTALL_DIR }}/bin/authserver.exe")) {
            Write-Error "安装失败，未在目标目录找到authserver.exe"
            exit 1
          }

      - name: 压缩编译产物
        run: |
          7z a -tzip "azerothcore-${{ env.BRANCH }}-win64.zip" "${{ env.INSTALL_DIR }}\*"
          if (-not (Test-Path "azerothcore-${{ env.BRANCH }}-win64.zip")) {
            Write-Error "压缩失败，未生成zip包"
            exit 1
          }

      - name: 上传编译结果及日志
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-${{ env.BRANCH }}-exe
          path: "azerothcore-${{ env.BRANCH }}-win64.zip, ./build/msbuild.log"
          retention-days: 14
