name: 编译AzerothCore（Windows-修复语法错误）

env:
  REPO_URL: "https://github.com/azerothcore/azerothcore-wotlk.git"
  BRANCH: "main"
  INSTALL_DIR: "./install"
  OPENSSL_DIR: "C:/Program Files/OpenSSL-Win64"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ github.workspace }}

    steps:
      - name: 拉取源码及核心子模块
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}  # 修正：使用预设的仓库URL
          ref: ${{ env.BRANCH }}
          submodules: recursive
          fetch-depth: 0
          clean: true

      - name: 安装编译依赖（修正MySQL连接器类型）
        run: |
          # 停止并移除可能存在的MySQL服务
          if (Get-Service -Name "MySQL" -ErrorAction SilentlyContinue) {
            Stop-Service -Name "MySQL" -Force
            sc delete MySQL | Out-Null
          }
          
          # 安装依赖（关键：使用MySQL C连接器而非C++）
          choco install -y `
            cmake `
            mysql-connector-c --version 8.0.36 `  # 修正：安装C连接器
            openssl --version 1.1.1w `
            zlib `
            --no-progress
          
          # 动态查找MySQL C连接器的头文件路径
          $mysqlInclude = Get-ChildItem -Path "C:\ProgramData\chocolatey\lib\mysql-connector-c" `
            -Recurse -Filter "include" `
            | Where-Object { $_.FullName -match "include$" } `
            | Select-Object -First 1 -ExpandProperty FullName
          if (-not $mysqlInclude) {
            Write-Error "未找到MySQL C连接器头文件目录"
            exit 1
          }
          echo "MYSQL_INCLUDE=$mysqlInclude" >> $env:GITHUB_ENV
          
          # 动态查找MySQL C连接器的库文件
          $mysqlLib = Get-ChildItem -Path "C:\ProgramData\chocolatey\lib\mysql-connector-c" `
            -Recurse -Filter "libmysql.lib" `
            | Select-Object -First 1 -ExpandProperty FullName
          if (-not $mysqlLib) {
            Write-Error "未找到libmysql.lib"
            exit 1
          }
          echo "MYSQL_LIB=$mysqlLib" >> $env:GITHUB_ENV
          
          # 验证路径
          Write-Host "找到MySQL头文件路径: $mysqlInclude"
          Write-Host "找到MySQL库文件路径: $mysqlLib"

      - name: 初始化VS2022 x64编译环境
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          toolset: 143

      - name: 生成VS2022解决方案（使用动态查找的依赖路径）
        run: |
          mkdir -Force build | Out-Null
          cd build
          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DCMAKE_BUILD_TYPE=Release `
            -DAC_USE_STD_MALLOC=ON `
            -DENABLE_MYSQL_SSL=ON `
            -DTOOLS_BUILD=ON `
            -DSCRIPTS=static `
            -DMYSQL_INCLUDE_DIR="${{ env.MYSQL_INCLUDE }}" `
            -DMYSQL_LIBRARY="${{ env.MYSQL_LIB }}" `
            -DOPENSSL_ROOT_DIR="${{ env.OPENSSL_DIR }}" `
            -DOPENSSL_INCLUDE_DIR="${{ env.OPENSSL_DIR }}/include" `
            -DOPENSSL_LIBRARIES="${{ env.OPENSSL_DIR }}/lib/libssl.lib;${{ env.OPENSSL_DIR }}/lib/libcrypto.lib"
          if (-not (Test-Path "AzerothCore.sln")) {
            Write-Error "CMake生成解决方案失败，未找到AzerothCore.sln"
            exit 1
          }

      - name: 用MSBuild编译项目
        run: |
          $slnPath = "./build/AzerothCore.sln"
          msbuild $slnPath `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /p:VisualStudioVersion=17.0 `
            /m `
            /nologo `
            /fl:msbuild.log
          if (-not (Test-Path "./build/bin/Release/authserver.exe")) {
            Write-Error "authserver.exe编译失败，未找到文件"
            exit 1
          }
          if (-not (Test-Path "./build/bin/Release/worldserver.exe")) {
            Write-Error "worldserver.exe编译失败，未找到文件"
            exit 1
          }

      - name: 安装编译结果
        run: |
          cd build
          cmake --install . --config Release
          if (-not (Test-Path "${{ env.INSTALL_DIR }}/bin/authserver.exe")) {
            Write-Error "安装失败，未在目标目录找到authserver.exe"
            exit 1
          }

      - name: 压缩编译产物
        run: |
          7z a -tzip "azerothcore-${{ env.BRANCH }}-win64.zip" "${{ env.INSTALL_DIR }}\*"
          if (-not (Test-Path "azerothcore-${{ env.BRANCH }}-win64.zip")) {
            Write-Error "压缩失败，未生成zip包"
            exit 1
          }

      - name: 上传编译结果及日志
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-${{ env.BRANCH }}-exe
          path: 
            - azerothcore-${{ env.BRANCH }}-win64.zip, ./build/msbuild.log
          retention-days: 14
