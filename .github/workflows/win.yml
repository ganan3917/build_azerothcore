name: Build AzerothCore-WoTLK win

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'AzerothCore repository URL'
        required: true
        default: 'azerothcore/azerothcore-wotlk.git'
      branch:
        description: 'Branch to build'
        required: true
        default: 'master'
      modules:
        description: 'Modules to include (separated by |)'
        required: false
        default: ''

jobs:
  build:
    runs-on: windows-latest
    
    env:
      # 基础配置
      AC_REPO: ${{ github.event.inputs.repo }}
      AC_BRANCH: ${{ github.event.inputs.branch }}
      AC_MODULES: ${{ github.event.inputs.modules }}
      
      # 目录设置
      SOURCE_DIR: ${{ github.workspace }}/azerothcore
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_DIR: ${{ github.workspace }}/install
      BOOST_VERSION: 1.82.0
      BOOST_TARGET_DIR: D:\boost  # D盘实际存储路径
      BOOST_DEFAULT_PATH: C:\Program Files\Boost  # Chocolatey默认安装路径

    steps:
      - name: Checkout AzerothCore
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AC_REPO }}
          ref: ${{ env.AC_BRANCH }}
          path: ${{ env.SOURCE_DIR }}
          submodules: 'recursive'

      - name: Checkout Modules
        if: env.AC_MODULES != ''
        run: |
          $modules = $env:AC_MODULES -split '\|'
          foreach ($module in $modules) {
            $moduleName = $module.Split('/')[-1] -replace '\.git$', ''
            $modulePath = "${{ env.SOURCE_DIR }}\modules\$moduleName"
            Write-Host "Cloning module: $module to $modulePath"
            git clone $module $modulePath
          }
        shell: pwsh

      - name: Install Boost
        run: |
          # 1. 确保D盘目标目录存在
          if (-not (Test-Path "${{ env.BOOST_TARGET_DIR }}")) {
            New-Item -Path "${{ env.BOOST_TARGET_DIR }}" -ItemType Directory -Force | Out-Null
            Write-Host "Created D: drive Boost directory: ${{ env.BOOST_TARGET_DIR }}"
          }

          # 2. 删除默认路径（如果存在），避免冲突
          if (Test-Path "${{ env.BOOST_DEFAULT_PATH }}") {
            Remove-Item -Path "${{ env.BOOST_DEFAULT_PATH }}" -Recurse -Force
            Write-Host "Removed existing default Boost directory"
          }

          # 3. 创建符号链接：将默认安装路径指向D盘目录
          # 需要管理员权限（GitHub Actions Windows环境默认具备）
          New-Item -ItemType SymbolicLink `
            -Path "${{ env.BOOST_DEFAULT_PATH }}" `
            -Target "${{ env.BOOST_TARGET_DIR }}" `
            -Force | Out-Null
          Write-Host "Created symlink: ${{ env.BOOST_DEFAULT_PATH }} -> ${{ env.BOOST_TARGET_DIR }}"

          # 4. 正常安装Boost（不指定目录，利用符号链接映射到D盘）
          Write-Host "Installing Boost ${{ env.BOOST_VERSION }} via Chocolatey"
          choco install boost-msvc-14.3 --version=${{ env.BOOST_VERSION }} -y --no-progress

          # 5. 验证安装（检查D盘实际目录是否有文件）
          if (-not (Test-Path "${{ env.BOOST_TARGET_DIR }}\include")) {
            throw "Boost installation failed - include directory not found in D: drive"
          }

          # 6. 设置BOOST_ROOT（指向符号链接路径，兼容编译系统）
          echo "BOOST_ROOT=${{ env.BOOST_DEFAULT_PATH }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "BOOST_ROOT set to: ${{ env.BOOST_DEFAULT_PATH }} (symlinked to D: drive)"
        shell: pwsh

      - name: Configure CMake
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          
          cmake ${{ env.SOURCE_DIR }} `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" `
            -DBOOST_ROOT="${{ env.BOOST_ROOT }}" `
            -DTOOLS=1 `
            -DSCRIPTS=1 `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      - name: Build with MSBuild
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild AzerothCore.sln /p:Configuration=Release /p:Platform=x64 /m /p:BuildInParallel=true
        shell: pwsh

      - name: Install
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild INSTALL.vcxproj /p:Configuration=Release /p:Platform=x64 /m
        shell: pwsh

      - name: Package Build
        run: |
          Compress-Archive -Path "${{ env.INSTALL_DIR }}\*" -DestinationPath "${{ github.workspace }}\azerothcore-build.zip"
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-wotlk-build
          path: ${{ github.workspace }}\azerothcore-build.zip
          retention-days: 7
