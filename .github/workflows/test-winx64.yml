name: build-win_X64-test

on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'AzerothCore repository URL'
        required: true
        default: 'liyunfan1223/azerothcore-wotlk'
      branch:
        required: true
        default: 'Playerbot'
      modules:
        description: 'Modules (separated by |)'
        default: 'https://github.com/liyunfan1223/mod-playerbots.git|https://github.com/azerothcore/mod-eluna.git|https://github.com/azerothcore/mod-learn-spells.git|https://github.com/azerothcore/mod-autobalance.git|https://github.com/azerothcore/mod-auto-revive.git'
  
  schedule:
    - cron: 0 19 * * *
    
jobs:
  build:
    runs-on: windows-latest
    
    env:
      # 核心配置
      AC_REPO: ${{ github.event.inputs.repo }}
      AC_BRANCH: ${{ github.event.inputs.branch }}
      AC_MODULES: ${{ github.event.inputs.modules }}
      
      # 目录设置
      SOURCE_DIR: ${{ github.workspace }}/azerothcore
      BUILD_DIR: ${{ github.workspace }}/build
      TEMP_DIR: D:\temp  # 统一临时目录
      
      # 依赖配置（统一D盘安装）
      BOOST_INSTALL_DIR: D:\boost\1.89.0
      BOOST_MSI_URL: https://archives.boost.io/release/1.89.0/binaries/boost_1_89_0-msvc-14.3-64.exe
      OPENSSL_INSTALL_DIR: D:\openssl\3.5.4
      OPENSSL_MSI_URL: https://slproweb.com/download/Win64OpenSSL-3_5_4.msi

    steps:
      - name: Checkout AzerothCore
        uses: actions/checkout@v4
        with:
          repository: ${{ env.AC_REPO }}
          ref: ${{ env.AC_BRANCH }}
          path: ${{ env.SOURCE_DIR }}
          submodules: 'recursive'

      - name: Checkout Modules
        if: env.AC_MODULES != ''
        run: |
          $modules = $env:AC_MODULES -split '\|'
          foreach ($module in $modules) {
            $moduleName = $module.Split('/')[-1] -replace '\.git$', ''
            git clone $module "${{ env.SOURCE_DIR }}\modules\$moduleName"
          }
        shell: pwsh

      - name: 安装依赖（Boost + OpenSSL）
        run: |
          # 创建统一临时目录
          New-Item -Path "${{ env.TEMP_DIR }}" -ItemType Directory -Force | Out-Null
          
          # 定义通用安装函数（修复变量解析问题）
          function Install-Dependency {
            param(
              [string]$Name,
              [string]$MsiUrl,
              [string]$InstallDir,
              [string]$TempDir
            )
            
            $installerName = $MsiUrl.Split('/')[-1]
            $installerPath = "$TempDir\$installerName"
            
            # 修复：使用 ${} 明确变量边界
            Write-Host "下载 ${Name}: $MsiUrl"
            
            # 下载安装包
            Invoke-WebRequest -Uri $MsiUrl -OutFile $installerPath -UseBasicParsing
            
            # 静默安装
            Write-Host "安装 ${Name} 到 $InstallDir"
            if ($Name -eq "Boost") {
              # Boost使用自身的静默参数
              Start-Process -FilePath $installerPath -ArgumentList "/VERYSILENT /DIR=`"$InstallDir`"" -Wait -NoNewWindow
            }
            else {
              # OpenSSL使用MSI标准参数
              Start-Process -FilePath "msiexec.exe" `
                -ArgumentList "/i `"$installerPath`" INSTALLDIR=`"$InstallDir`" /qn /norestart" `
                -Wait -NoNewWindow
            }
            
            # 验证安装
            if (-not (Test-Path $InstallDir)) {
              Write-Error "${Name} 安装失败，目录不存在: $InstallDir"
              exit 1
            }
            Write-Host "${Name} 安装成功"
          }
          
          # 安装Boost
          Install-Dependency -Name "Boost" `
            -MsiUrl "${{ env.BOOST_MSI_URL }}" `
            -InstallDir "${{ env.BOOST_INSTALL_DIR }}" `
            -TempDir "${{ env.TEMP_DIR }}"
          
          # 安装OpenSSL
          Install-Dependency -Name "OpenSSL" `
            -MsiUrl "${{ env.OPENSSL_MSI_URL }}" `
            -InstallDir "${{ env.OPENSSL_INSTALL_DIR }}" `
            -TempDir "${{ env.TEMP_DIR }}"
          
          # 配置环境变量
          $env:Path += ";${{ env.OPENSSL_INSTALL_DIR }}\bin"
          echo "BOOST_ROOT=${{ env.BOOST_INSTALL_DIR }}".Replace('\', '/') | Out-File $env:GITHUB_ENV -Append
          echo "OPENSSL_ROOT_DIR=${{ env.OPENSSL_INSTALL_DIR }}" | Out-File $env:GITHUB_ENV -Append
          echo "PATH=$env:Path" | Out-File $env:GITHUB_ENV -Append
          
          # 验证环境
          openssl version
          Write-Host "依赖环境配置完成"
        shell: pwsh
  
      - name: Configure CMake
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          cd ${{ env.BUILD_DIR }}
          
          cmake ${{ env.SOURCE_DIR }} `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install" `
            -DBOOST_ROOT="${{ env.BOOST_ROOT }}" `
            -DTOOLS=1 `
            -DSCRIPTS=static
        shell: pwsh

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build with MSBuild
        run: |
          cd ${{ env.BUILD_DIR }}
          msbuild AzerothCore.sln /p:Configuration=Release /p:Platform=x64 /m
        shell: pwsh

      - name: 打包与发布
        run: |
          $utc = (Get-Date).ToUniversalTime().ToString("yyyyMMddHHmmss")
          $zipName = "Release_$utc.zip"
          $releaseDir = "${{ env.BUILD_DIR }}\bin\Release\*"
          
          # 验证构建结果
          if (-not (Test-Path $releaseDir)) {
            Write-Error "Release目录不存在"
            exit 1
          }
          
          # 打包
          & "C:\Program Files\7-Zip\7z.exe" a -tzip $zipName $releaseDir -mx=5
          echo "zipName=$zipName" >> $env:GITHUB_OUTPUT
          echo "utc=$utc" >> $env:GITHUB_OUTPUT
        id: package
        shell: pwsh

      - name: 创建Release
        uses: ncipollo/release-action@v1.14.0
        with:
          tag: "Azerothcore_playerbots-win_X64_${{ steps.package.outputs.utc }}"
          name: "Build ${{ steps.package.outputs.utc }}"
          artifacts: "${{ steps.package.outputs.zipName }}"
          token: ${{ secrets.BUILD_AZEROTHCORE }}
          replacesArtifacts: true

      - name: 保留最新3个Release
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.BUILD_AZEROTHCORE }}
