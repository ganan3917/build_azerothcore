name: WindowsBuildAzerothCore

# 触发条件：推送到 main 分支或手动触发
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发构建

jobs:
  build-windows:
    runs-on: windows-latest  # 使用最新 Windows 镜像（含 VS2022）
    timeout-minutes: 120  # 延长超时时间（编译可能耗时较长）

    steps:
      # 1. 拉取代码及子模块
      - name: 拉取 AzerothCore 代码
        uses: actions/checkout@v4
        with:
          repository: azerothcore/azerothcore-wotlk  # 可替换为你的 Fork 仓库
          submodules: recursive  # 必须拉取所有子模块（如 dep、modules 等）
          fetch-depth: 0  # 拉取完整历史（避免子模块依赖问题）

      # 2. 安装额外依赖（如 MySQL 客户端库，编译时需要）
      - name: 安装依赖包
        run: |
          # 使用 Chocolatey 安装 CMake（可选，镜像可能已自带，但确保版本兼容）
          choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          # 安装 MySQL 开发库（编译 AzerothCore 必须）
          choco install -y mysql-connector-c++

      # 3. 配置 CMake 生成 Visual Studio 项目
      - name: 生成 VS 项目文件
        run: |
          # 创建构建目录
          mkdir build
          cd build
          # 配置 CMake（参数根据需求调整）
          cmake .. -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_INSTALL_PREFIX=../dist `  # 编译产物输出目录
            -DCMAKE_BUILD_TYPE=Release `      #  Release 模式（优化编译）
            -DENABLE_MYSQL_SSL=OFF `          # 禁用 MySQL SSL（简化配置）
            -DTOOLS=ON `                      # 编译工具（authserver/worldserver 等）
            -DSCRIPTS=dynamic `               # 动态脚本模块（支持热重载）
            -DMODULES=ON `                    # 启用模块系统
            -DENABLE_EXTRA_SCRIPTS=ON `       # 启用额外脚本
            -DWITH_WARNINGS=ON `              # 显示编译警告（便于调试）
            -DUSE_SFMT=ON `                   # 使用快速随机数生成器
            -DNOJEM=ON                        # 禁用 JEMalloc（Windows 不兼容）

      # 4. 编译项目（使用 VS 编译器）
      - name: 编译 AzerothCore
        run: |
          cd build
          # 使用 MSBuild 编译（Release 模式，并行编译加速）
          cmake --build . --config Release --target install -j $env:NUMBER_OF_PROCESSORS
          # 注：$env:NUMBER_OF_PROCESSORS 自动获取 CPU 核心数，加速编译

      # 5. 验证编译产物
      - name: 检查输出文件
        run: |
          # 验证关键可执行文件是否存在
          if (-not (Test-Path ./dist/bin/authserver.exe)) { throw "authserver.exe 缺失" }
          if (-not (Test-Path ./dist/bin/worldserver.exe)) { throw "worldserver.exe 缺失" }
          # 输出文件版本信息
          ./dist/bin/authserver.exe --version
          ./dist/bin/worldserver.exe --version

      # 6. 打包编译产物（含配置文件、脚本、模块等）
      - name: 打包发布文件
        run: |
          # 压缩 dist 目录（包含所有运行所需文件）
          Compress-Archive -Path ./dist/* -DestinationPath azerothcore-windows-release.zip -Force

      # 7. 上传产物作为 Artifact（便于下载）
      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-windows-${{ github.sha }}  # 产物名称含 commit SHA
          path: azerothcore-windows-release.zip
          retention-days: 14  # 产物保留 14 天
