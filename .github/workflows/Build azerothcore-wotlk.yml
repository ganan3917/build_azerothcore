name: Build azerothcore-wotlk
on:
  workflow_dispatch:
  schedule:
    - cron: 0 19 * * *

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      # 路径配置
      ROOT_DIR: ./azerothcore
      BUILD_DIR: ./azerothcore/build
      INSTALL_DIR: ./azerothcore/build/install
      MODULES_DIR: ./azerothcore/modules
      # 核心配置
      ACORE_REPO: "https://github.com/azerothcore/azerothcore-wotlk.git"
      ACORE_BRANCH: "master"
      BUILD_TYPE: "MinSizeRel"
      MODULES_INPUT: |
              https://github.com/azerothcore/mod-eluna.git master
              https://github.com/azerothcore/mod-learn-spells.git master
              https://github.com/azerothcore/mod-autobalance.git master
              https://github.com/azerothcore/mod-auto-revive.git master
              
    steps:
      - name: 安装依赖
        run: |
          sudo apt update -y
          sudo apt install -y \
            git cmake make clang \
            libmysqlclient-dev libssl-dev \
            libbz2-dev libreadline-dev libncurses-dev \
            libboost-all-dev libcurl4-openssl-dev
          sudo apt clean
      - name: 生成时间
        id: ts
        run: |
          echo "utc=$(date -u +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          echo "sh=$(TZ='Asia/Shanghai' date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
      - name: 克隆仓库
        run: |
          git clone --branch "${{ env.ACORE_BRANCH }}" "${{ env.ACORE_REPO }}" "${{ env.ROOT_DIR }}"
          cd "${{ env.ROOT_DIR }}" && git submodule update --init --recursive
      - name: 拉取模块
        id: modules
        run: |
          mkdir -p "${{ env.MODULES_DIR }}"
          success=()
          failure=()
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            repo=$(echo "$line" | awk '{print $1}')
            branch=$(echo "$line" | awk '{print $2}')
            name=$(basename "$repo" .git)
            if git clone --depth 1 --branch "$branch" "$repo" "${{ env.MODULES_DIR }}/$name"; then
              success+=("$name（$branch）")
            else
              failure+=("$name（$branch）")
              echo "⚠️ 模块 $name 克隆失败，将继续构建"
            fi
          done <<< "${{ env.MODULES_INPUT }}"
          echo "success=$(IFS=';'; echo "${success[*]}")" >> $GITHUB_OUTPUT
          echo "failure=$(IFS=';'; echo "${failure[*]}")" >> $GITHUB_OUTPUT
          
      - name: 配置与编译
        run: |
          mkdir -p "${{ env.BUILD_DIR }}" && cd "${{ env.BUILD_DIR }}"
          cmake ../ \
            -DCMAKE_BUILD_TYPE="${{ env.BUILD_TYPE }}" \
            -DCMAKE_INSTALL_PREFIX="${{ env.INSTALL_DIR }}" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DWITH_WARNINGS=1 \
            -DTOOLS_BUILD=all \
            -DSCRIPTS=static \
            -DMODULES=static
          make -j$(nproc) && make install
          
      - name: 打包文件
        id: package
        run: |
          # 打包该路径下的所有文件（保留目录结构）
          tar -czvf "acore-${{ steps.ts.outputs.utc }}.tar.gz" /home/runner/work/build_azerothcore/build_azerothcore/azerothcore/build/azerothcore/build/install/
          echo "name=acore-${{ steps.ts.outputs.utc }}.tar.gz" >> $GITHUB_OUTPUT

      - name: 创建Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.BUILD_AZEROTHCORE }}
        with:
          tag_name: "Azerothcore-Wotlk_${{ steps.ts.outputs.date }}"
          release_name: "Auto Build Azerothcore-Wotlk ${{ steps.ts.outputs.sh }}"
          body: |
            ### Auto Build Azerothcore-Wotlk
            - 核心分支：${{ env.ACORE_BRANCH }}
            - 成功模块：${{ steps.modules.outputs.success }}
            - 失败模块：${{ steps.modules.outputs.failure || '无' }}

      - name: 上传Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.BUILD_AZEROTHCORE }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.package.outputs.name }}
          asset_name: ${{ steps.package.outputs.name }}
          asset_content_type: application/gzip
          path: ${{ steps.package.outputs.name }}
          retention-days: 1
