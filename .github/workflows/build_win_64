name: 编译AzerothCore（Windows x64 VS2022）

on:
  workflow_dispatch:
    inputs:
      acore_repo:
        description: "AzerothCore仓库地址"
        required: true
        default: "https://github.com/azerothcore/azerothcore-wotlk.git"
        type: string
      acore_branch:
        description: "AzerothCore分支"
        required: true
        default: "master"
        type: string
      build_type:
        description: "编译类型"
        required: true
        default: "RelWithDebInfo"
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel
  push:
    branches: ["main"]

jobs:
  build-x64-vs2022:
    runs-on: windows-2022
    steps:
      # 1. 检查系统架构（确保x64）
      - name: 验证x86-64架构
        run: |
          $arch = (Get-CimInstance Win32_OperatingSystem).OSArchitecture
          if ($arch -ne "64-bit") {
            Write-Error "❌ 仅支持x64架构（当前：$arch）"
            exit 1
          }
          Write-Host "✅ 确认架构：x64"
        shell: pwsh

      # 2. 安装必要依赖（利用runner预装工具，仅补充缺失组件）
      - name: 安装编译依赖
        run: |
          # 安装Chocolatey（若未预装）
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
          # 安装AzerothCore核心依赖（指定稳定版本）
          choco install -y `
            boost-msvc-14.3 --version 1.81.0 `  # 匹配VS2022（MSVC 14.3）
            mysql-connector-c++ --version 8.0.33 `
            openssl --version 3.1.2 `
            bzip2 7zip
        shell: pwsh

      # 3. 克隆代码及子模块
      - name: 克隆AzerothCore仓库
        run: |
          $repo = "${{ github.event.inputs.acore_repo }}"
          $branch = "${{ github.event.inputs.acore_branch }}"
          Write-Host "🔧 克隆仓库：$repo（分支：$branch）"
          git clone --depth 1 --branch $branch $repo azerothcore
          cd azerothcore
          git submodule update --init --recursive --depth 1  # 递归拉取子模块
        shell: pwsh

      # 4. CMake生成VS2022 x64解决方案（动态依赖路径）
      - name: 生成VS2022 x64解决方案
        id: cmake-config
        run: |
          New-Item -Path azerothcore/build -ItemType Directory -Force | Out-Null
          cd azerothcore/build

          # 动态获取依赖安装路径（适配版本更新）
          $mysqlPath = (Get-Item "C:\Program Files\MySQL\MySQL Connector C++ *").FullName
          $boostPath = (Get-Item "C:\ProgramData\chocolatey\lib\boost-msvc-14.3\tools\boost_*").FullName
          $opensslPath = "C:\Program Files\OpenSSL"

          # CMake配置（强制x64架构）
          cmake .. `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_INSTALL_PREFIX=../install `
            -DBUILD_SHARED_LIBS=OFF `
            -DWITH_WARNINGS=ON `
            -DTOOLS_BUILD=all `
            -DSCRIPTS=static `
            -DMODULES=static `
            -DMySQL_INCLUDE_DIR="$mysqlPath\include" `
            -DMySQL_LIBRARY="$mysqlPath\lib64\mysqlcppconn8.lib" `
            -DBOOST_ROOT="$boostPath" `
            -DOPENSSL_ROOT_DIR="$opensslPath" `
            -DCMAKE_BUILD_TYPE=${{ github.event.inputs.build_type }}

          # 获取解决方案路径
          $slnPath = Get-ChildItem -Path . -Filter "*.sln" | Select-Object -First 1 -ExpandProperty FullName
          echo "SLN_PATH=$slnPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "✅ 生成解决方案：$slnPath"
        shell: pwsh

      # 5. 使用MSBuild编译x64位产物
      - name: 编译x64解决方案
        run: |
          $slnPath = "${{ steps.cmake-config.outputs.SLN_PATH }}"
          $buildType = "${{ github.event.inputs.build_type }}"

          # 加载VS2022环境（确保msbuild可用）
          & "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat" -arch=x64 -host_arch=x64 | Out-Null

          # 多线程编译（/m）并安装
          msbuild "$slnPath" `
            /p:Configuration="$buildType" `
            /p:Platform="x64" `
            /t:INSTALL `
            /m `
            /nologo `
            /clp:ErrorsOnly;WarningsOnly

          Write-Host "✅ 编译完成，产物路径：azertothcore/install/bin"
        shell: pwsh

      # 6. 验证产物为x64架构
      - name: 验证exe架构（x64）
        run: |
          # 加载VS工具（含dumpbin）
          & "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat" -arch=x64 | Out-Null

          # 检查核心可执行文件
          $exePaths = @(
            "azerothcore/install/bin/authserver.exe",
            "azerothcore/install/bin/worldserver.exe"
          )

          foreach ($exe in $exePaths) {
            if (-not (Test-Path $exe)) {
              Write-Error "❌ 未找到产物：$exe"
              exit 1
            }
            # 验证是否为x64架构（8664对应x64）
            $output = dumpbin /headers $exe | Select-String "machine"
            if ($output -notmatch "8664") {
              Write-Error "❌ $exe 不是x64架构：$output"
              exit 1
            }
            Write-Host "✅ 验证通过：$exe（x64）"
          }
        shell: pwsh

      # 7. 打包产物
      - name: 打包x64位执行文件
        id: package
        run: |
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          $packageName = "acore-x64-${{ github.event.inputs.build_type }}-${timestamp}.zip"
          7z a -tzip $packageName .\azerothcore\install\*
          echo "PACKAGE_NAME=$packageName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "📦 打包完成：$packageName"
        shell: pwsh

      # 8. 上传产物为Artifact
      - name: 保存编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.PACKAGE_NAME }}
          path: ${{ steps.package.outputs.PACKAGE_NAME }}
          retention-days: 7

      # 9. 输出结果信息
      - name: 输出构建结果
        run: |
          Write-Host "::notice::✅ 构建完成（x64）"
          Write-Host "::notice::📦 产物名称：${{ steps.package.outputs.PACKAGE_NAME }}"
          Write-Host "::notice::🔨 编译类型：${{ github.event.inputs.build_type }}"
          Write-Host "::notice::🗓️ 时间：$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        shell: pwsh
