name: build_azerothcore

on:
  workflow_dispatch:
  schedule:
    - cron: 0 19 * * *

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write  # 发布Releases所需权限
    env:
      ACORE_REPO: "https://github.com/liyunfan1223/azerothcore-wotlk.git"
      ACORE_BRANCH: "Playerbot"
      BUILD_TYPE: "MinSizeRel"
      MODULES_INPUT: |
        https://github.com/liyunfan1223/mod-playerbots.git master
        https://github.com/azerothcore/mod-eluna.git master
        https://github.com/azerothcore/mod-learn-spells.git master
        https://github.com/azerothcore/mod-autobalance.git master
        https://github.com/azerothcore/mod-auto-revive.git master
      MODULES_DIR: azerothcore/modules
      RETAIN_COUNT: 3  # 保留最新3个Release

    steps:
      - name: 检查架构
        run: |
          [ "$(uname -m)" = "x86_64" ] || { echo "❌ 仅支持x86_64"; exit 1; }
          echo "✅ 架构确认: x86_64"

      - name: 安装依赖
        run: |
          sudo apt update -y
          sudo apt install -y git cmake make gcc g++ clang libmysqlclient-dev libssl-dev \
            libbz2-dev libreadline-dev libncurses-dev libboost-all-dev libcurl4-openssl-dev

      - name: 生成时间戳与标签
        id: ts
        run: |
          utc=$(date -u +%Y%m%d%H%M%S)
          sh=$(TZ='Asia/Shanghai' date +%Y%m%d%H%M%S)
          echo "utc=$utc" >> $GITHUB_OUTPUT
          echo "sh=$sh" >> $GITHUB_OUTPUT
          echo "tag=build-$utc" >> $GITHUB_OUTPUT  # 修复标签生成语法

      - name: 克隆核心仓库
        run: |
          git clone --depth 1 --branch "$ACORE_BRANCH" "$ACORE_REPO" azerothcore
          cd azerothcore && git submodule update --init --recursive

      - name: 拉取模块
        id: modules
        run: |
          mkdir -p "$MODULES_DIR"
          success=()
          failure=()
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            repo=$(echo "$line" | awk '{print $1}')
            branch=$(echo "$line" | awk '{print $2}')
            name=$(basename "$repo" .git)
            if git clone --depth 1 --branch "$branch" "$repo" "$MODULES_DIR/$name"; then
              success+=("$name")
            else
              failure+=("$name")
            fi
          done <<< "$MODULES_INPUT"
          echo "success=$(IFS=,; echo "${success[*]}")" >> $GITHUB_OUTPUT
          echo "failure=$(IFS=,; echo "${failure[*]}")" >> $GITHUB_OUTPUT

      - name: 配置与编译
        run: |
          mkdir -p azerothcore/build && cd azerothcore/build
          cmake ../ \
            -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
            -DBUILD_SHARED_LIBS=OFF -DWITH_WARNINGS=1 \
            -DTOOLS_BUILD=all -DSCRIPTS=static -DMODULES=static
          make -j$(nproc) && make install

      - name: 打包产物
        id: package
        run: |
          tar -czvf acore-${{ steps.ts.outputs.utc }}.tar.gz -C azerothcore/install .
          echo "name=acore-${{ steps.ts.outputs.utc }}.tar.gz" >> $GITHUB_OUTPUT

      - name: 保存到Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.name }}
          path: ${{ steps.package.outputs.name }}
          retention-days: 7

      - name: 发布到Releases并清理旧版本
        run: |
          # 安装GitHub CLI
          sudo apt install -y gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

          # 创建Release
          gh release create ${{ steps.ts.outputs.tag }} \
            --title "Build ${{ steps.ts.outputs.sh }}" \
            --notes "北京时间: ${{ steps.ts.outputs.sh }} | 分支: $ACORE_BRANCH | 成功模块: ${{ steps.modules.outputs.success }}" \
            --prerelease

          # 上传产物
          gh release upload ${{ steps.ts.outputs.tag }} ${{ steps.package.outputs.name }} --clobber

          # 清理旧版本（保留最新${RETAIN_COUNT}个）
          tags=$(gh release list --limit 100 --json tagName --jq '.[] | select(.tagName | startswith("build-")) | .tagName' | head -n +$((RETAIN_COUNT + 10)))
          echo "$tags" | tail -n +$((RETAIN_COUNT + 1)) | while read -r tag; do
            gh release delete "$tag" --yes
            git push origin --delete "$tag"
          done
