name: build_azerothcore

on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      ACORE_REPO: "https://github.com/liyunfan1223/azerothcore-wotlk.git"
      ACORE_BRANCH: "Playerbot"
      BUILD_TYPE: "MinSizeRel"
      MODULES_INPUT: |
        https://github.com/liyunfan1223/mod-playerbots.git master
        https://github.com/azerothcore/mod-eluna.git master
        https://github.com/azerothcore/mod-learn-spells.git master
        https://github.com/azerothcore/mod-autobalance.git master
        https://github.com/azerothcore/mod-auto-revive.git master
      MODULES_DIR: azerothcore/modules
      RETAIN_COUNT: 3  # 保留最新3个Release
      ARTIFACT_NAME: "azerothcore-build"
      RELEASE_TAG: "build-$(date +%Y%m%d-%H%M%S)"  # 基于版本标签（时间戳）

    steps:
      - name: 检查架构（仅x86_64）
        run: |
          if [ "$(uname -m)" != "x86_64" ]; then
            echo "❌ 仅支持x86_64架构"
            exit 1
          fi
          echo "✅ 架构确认: x86_64"

      - name: 安装依赖
        run: |
          sudo apt update -yq
          sudo apt install -yq \
            git cmake make clang \
            libmysqlclient-dev libssl-dev libbz2-dev \
            libreadline-dev libncurses-dev libboost-all-dev \
            libcurl4-openssl-dev
          sudo apt clean

      - name: 克隆核心仓库与子模块
        run: |
          git clone --depth 1 --branch "$ACORE_BRANCH" "$ACORE_REPO" azerothcore
          cd azerothcore && git submodule update --init --recursive --depth 1

      - name: 拉取模块
        id: modules
        run: |
          mkdir -p "$MODULES_DIR"
          success=()
          failure=()
          
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            repo=$(echo "$line" | awk '{print $1}')
            branch=$(echo "$line" | awk '{print $2}')
            mod_name=$(basename "$repo" .git)
            
            if git clone --depth 1 --branch "$branch" "$repo" "$MODULES_DIR/$mod_name"; then
              success+=("$mod_name")
            else
              failure+=("$mod_name")
              echo "⚠️ 模块 $mod_name 拉取失败"
            fi
          done <<< "$MODULES_INPUT"
          
          echo "success=${success[*]}" | tr ' ' ',' >> $GITHUB_OUTPUT
          echo "failure=${failure[*]}" | tr ' ' ',' >> $GITHUB_OUTPUT

      - name: 配置与编译
        run: |
          mkdir -p azerothcore/build && cd azerothcore/build
          cmake ../ \
            -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DBUILD_SHARED_LIBS=OFF \
            -DWITH_WARNINGS=1 \
            -DTOOLS_BUILD=all \
            -DSCRIPTS=static \
            -DMODULES=static
          make -j$(nproc)
          make install

      - name: 打包构建产物
        run: |
          # 进入安装目录打包（包含bin、etc、lib等核心文件）
          cd azerothcore/install
          zip -r "${{ env.ARTIFACT_NAME }}.zip" ./*
          # 移动到根目录便于上传
          mv "${{ env.ARTIFACT_NAME }}.zip" ../../

      - name: 创建GitHub Release并上传产物
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: "自动构建 ${{ env.RELEASE_TAG }}"
          body: |
            ## 构建信息
            - 核心分支: ${{ env.ACORE_BRANCH }}
            - 成功集成模块: ${{ steps.modules.outputs.success }}
            - 失败模块: ${{ steps.modules.outputs.failure || '无' }}
            - 构建时间: ${{ github.run_at }}
          files: ${{ env.ARTIFACT_NAME }}.zip
          draft: false
          prerelease: false

      - name: 清理旧版本Release
        run: |
          # 安装GitHub CLI工具（用于操作Release）
          type gh >/dev/null 2>&1 || {
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update -yq && sudo apt install -yq gh
          }
          
          # 配置GitHub认证（使用工作流内置令牌）
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
          # 获取所有Release标签（按创建时间倒序），跳过前N个保留版本，删除其余
          gh release list --limit 100 --json tagName --jq '.[].tagName' | tail -n +$((RETAIN_COUNT + 1)) | while read -r tag; do
            echo "🗑️ 删除旧版本: $tag"
            gh release delete "$tag" --yes
            # 同时删除对应的Git标签
            git push origin --delete "$tag"
          done
