name: Build AzerothCore x86-64

# 触发条件：手动触发 + push 到 master 分支时自动触发
on:
  workflow_dispatch:  # 允许手动在 GitHub 界面触发
  push:
    branches: [ "master" ]  # 可替换为你的目标分支

# 工作流任务
jobs:
  build:
    runs-on: ubuntu-22.04-large
    steps:
      # 步骤 1：拉取代码并初始化子模块
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive  # 自动初始化所有子模块（关键，避免依赖缺失）

      # 步骤 2：安装编译依赖
      - name: Install dependencies
        run: |
          sudo apt update -y
          # 安装基础工具和 AzerothCore 依赖
          sudo apt install -y \
            cmake \
            make \
            g++ \
            libboost-all-dev \
            libmysqlclient-dev \
            libssl-dev \
            zlib1g-dev \
            libbz2-dev \
            libreadline-dev \
            libncurses-dev \
            libace-dev \
            mysql-client  # 仅客户端，编译不需要完整 MySQL 服务

      # 步骤 3：配置 CMake（指定 x86-64 架构和编译参数）
      - name: Configure CMake
        run: |
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \  # 发布模式（优化性能）
            -DCMAKE_SYSTEM_PROCESSOR=x86_64 \  # 强制 x86-64 架构
            -DACE_INCLUDE_DIR=/usr/include/ace \  # ACE 库路径
            -DACE_LIBRARY=/usr/lib/x86_64-linux-gnu/libACE.so \
            -DBUILD_TESTING=OFF  # 关闭测试（加速编译）

      # 步骤 4：编译项目（利用多核心加速）
      - name: Build AzerothCore
        run: |
          cd build
          make -j4

      # 步骤 5：打包编译产物并上传为 Artifact
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: azerothcore-x86_64-release
          path: |
            build/bin/  # 包含 authserver、worldserver 等可执行文件
            build/lib/  # 依赖的动态库（可选，运行时可能需要）
          retention-days: 7  # 产物保留 7 天（可调整）
