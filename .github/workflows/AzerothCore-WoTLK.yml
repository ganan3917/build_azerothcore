name: 编译AzerothCore并输出到Annotations

# 触发条件：手动触发 + 推送到main分支自动触发
on:
  workflow_dispatch:
    inputs:
      acore_repo:
        description: "AzerothCore仓库地址"
        required: true
        default: "https://github.com/azerothcore/azerothcore-wotlk.git"
        type: string
      acore_branch:
        description: "AzerothCore分支"
        required: true
        default: "master"
        type: string
      build_type:
        description: "编译类型"
        required: true
        default: "MinSizeRel"
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel
  push:
    branches: ["main"]

jobs:
  build-and-annotate:
    runs-on: ubuntu-22.04
    steps:
      - name: 检查系统架构（确保x86-64）
        run: |
          if [ "$(uname -m)" != "x86_64" ]; then
            echo "❌ 仅支持x86_64架构"
            exit 1
          fi
          echo "✅ 确认架构：x86_64"

      - name: 安装依赖（官方推荐）
        run: |
          sudo apt update -y
          sudo apt install -y git cmake make gcc g++ clang libmysqlclient-dev libssl-dev \
            libbz2-dev libreadline-dev libncurses-dev libboost-all-dev libcurl4-openssl-dev

      - name: 定义时间戳变量（用于命名）
        id: timestamp
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: 克隆AzerothCore仓库
        run: |
          REPO="${{ github.event.inputs.acore_repo || 'https://github.com/azerothcore/azerothcore-wotlk.git' }}"
          BRANCH="${{ github.event.inputs.acore_branch || 'master' }}"
          echo "🔧 克隆仓库：$REPO（分支：$BRANCH）"
          git clone --depth 1 --branch "$BRANCH" "$REPO" azerothcore
          cd azerothcore
          git submodule update --init --recursive

      - name: 配置CMake
        run: |
          BUILD_TYPE="${{ github.event.inputs.build_type || 'RelWithDebInfo' }}"
          mkdir -p azerothcore/build && cd azerothcore/build
          cmake ../ -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DCMAKE_C_COMPILER=/usr/bin/clang \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
            -DBUILD_SHARED_LIBS=OFF \
            -DWITH_WARNINGS=1 \
            -DTOOLS_BUILD=all \
            -DSCRIPTS=static \
            -DMODULES=static

      - name: 编译项目
        run: |
          cd azerothcore/build
          echo "🚀 开始编译（使用$(nproc)核心）"
          make -j$(nproc)
          make install

      - name: 打包编译结果（时间戳命名）
        id: package
        run: |
          TIMESTAMP="${{ steps.timestamp.outputs.TIMESTAMP }}"
          # 打包安装目录
          tar -czvf acore-build-${TIMESTAMP}.tar.gz -C azerothcore/install .
          # 获取包大小（用于Annotations）
          PACKAGE_SIZE=$(du -h acore-build-${TIMESTAMP}.tar.gz | awk '{print $1}')
          echo "PACKAGE_NAME=acore-build-${TIMESTAMP}.tar.gz" >> $GITHUB_OUTPUT
          echo "PACKAGE_SIZE=$PACKAGE_SIZE" >> $GITHUB_OUTPUT
          echo "📦 打包完成：acore-build-${TIMESTAMP}.tar.gz（大小：$PACKAGE_SIZE）"

      - name: 输出编译结果到Annotations
        run: |
          # GitHub Annotations格式：::notice|warning|error file=路径,line=行号::消息（支持Markdown）
          echo "::notice title=编译产物信息::" >&2
          echo "::notice::📦 产物名称：${{ steps.package.outputs.PACKAGE_NAME }}" >&2
          echo "::notice::📊 产物大小：${{ steps.package.outputs.PACKAGE_SIZE }}" >&2
          echo "::notice::🔗 编译来源：${{ github.event.inputs.acore_repo || 'https://github.com/azerothcore/azerothcore-wotlk.git' }}（分支：${{ github.event.inputs.acore_branch || 'master' }}）" >&2
          echo "::notice::🔨 编译类型：${{ github.event.inputs.build_type || 'RelWithDebInfo' }}" >&2
          echo "::notice::⏰ 编译时间：$(date +'%Y-%m-%d %H:%M:%S')" >&2
        # 注意：Annotations需要输出到stderr（>&2）才能被GitHub识别

      # 可选：将产物保存为工作流Artifact（方便下载）
      - name: 保存产物为Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.PACKAGE_NAME }}
          path: ${{ steps.package.outputs.PACKAGE_NAME }}
          retention-days: 7  # 保留7天
