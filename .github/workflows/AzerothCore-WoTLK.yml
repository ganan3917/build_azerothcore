name: 编译AzerothCore并发布到Releases

# 触发条件：手动触发 + 推送到main分支自动触发
on:
  workflow_dispatch:
    inputs:
      acore_repo:
        description: "AzerothCore仓库地址"
        required: true
        default: "https://github.com/azerothcore/azerothcore-wotlk.git"
        type: string
      acore_branch:
        description: "AzerothCore分支"
        required: true
        default: "master"
        type: string
      build_type:
        description: "编译类型"
        required: true
        default: "RelWithDebInfo"
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel
  push:
    branches: ["main"]

# 权限配置（允许创建/删除Releases）
permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-22.04
    steps:
      - name: 检查系统架构（确保x86-64）
        run: |
          if [ "$(uname -m)" != "x86_64" ]; then
            echo "❌ 仅支持x86_64架构"
            exit 1
          fi
          echo "✅ 确认架构：x86_64"

      - name: 安装依赖（官方推荐）
        run: |
          sudo apt update -y
          # 移除不必要的mysql-server，仅保留客户端开发库
          sudo apt install -y git cmake make gcc g++ clang libmysqlclient-dev libssl-dev \
            libbz2-dev libreadline-dev libncurses-dev libboost-all-dev libcurl4-openssl-dev
          # 安装GitHub CLI（用于管理Releases）
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update -y && sudo apt install gh -y

      - name: 定义时间戳变量（用于命名）
        id: timestamp
        run: echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: 克隆AzerothCore仓库
        run: |
          REPO="${{ github.event.inputs.acore_repo || 'https://github.com/azerothcore/azerothcore-wotlk.git' }}"
          BRANCH="${{ github.event.inputs.acore_branch || 'master' }}"
          echo "🔧 克隆仓库：$REPO（分支：$BRANCH）"
          git clone --depth 1 --branch "$BRANCH" "$REPO" azerothcore
          cd azerothcore
          git submodule update --init --recursive

      - name: 配置CMake
        run: |
          BUILD_TYPE="${{ github.event.inputs.build_type || 'RelWithDebInfo' }}"
          mkdir -p azerothcore/build && cd azerothcore/build
          # 修复CMake参数错误（补充-D前缀，修正SCRIPTS拼写）
          cmake ../ -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DCMAKE_C_COMPILER=/usr/bin/clang \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
            -DBUILD_SHARED_LIBS=OFF \
            -DWITH_WARNINGS=1 \
            -DTOOLS_BUILD=all \
            -DSCRIPTS=static \
            -DMODULES=static

      - name: 编译项目
        run: |
          cd azerothcore/build
          echo "🚀 开始编译（使用$(nproc)核心）"
          make -j$(nproc)
          make install

      - name: 打包编译结果（时间戳命名）
        run: |
          TIMESTAMP="${{ steps.timestamp.outputs.TIMESTAMP }}"
          # 打包安装目录（包含可执行文件、配置、工具等）
          tar -czvf acore-build-${TIMESTAMP}.tar.gz -C azerothcore/install .
          echo "📦 打包完成：acore-build-${TIMESTAMP}.tar.gz"

      - name: 创建GitHub Release并上传产物
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TIMESTAMP="${{ steps.timestamp.outputs.TIMESTAMP }}"
          REPO_BRANCH="${{ github.event.inputs.acore_branch || 'master' }}"
          REPO_URL="${{ github.event.inputs.acore_repo || 'https://github.com/azerothcore/azerothcore-wotlk.git' }}"
          # 创建Release标签（唯一标识）
          TAG="build-${TIMESTAMP}"
          # 发布描述（使用标准Markdown换行）
          DESCRIPTION="自动编译于 $(date +'%Y-%m-%d %H:%M:%S')\n\n仓库: $REPO_URL\n分支: $REPO_BRANCH\n编译类型: ${{ github.event.inputs.build_type || 'RelWithDebInfo' }}"
          # 创建Release并上传打包文件
          gh release create "$TAG" \
            --title "AzerothCore 编译产物 ${TIMESTAMP}" \
            --body "$DESCRIPTION" \
            --prerelease \
            acore-build-${TIMESTAMP}.tar.gz

      - name: 清理旧Releases（仅保留最新5个）
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 列出所有Releases（按创建时间排序，最新在前），取第6个及以后的标签
          OLD_TAGS=$(gh release list --exclude-drafts --limit 100 --json tagName --jq '.[5:].tagName | select(. != null)')
          # 循环删除旧版本
          while IFS= read -r TAG; do
            if [ -n "$TAG" ]; then
              echo "🗑️ 删除旧版本：$TAG"
              gh release delete "$TAG" --yes
              # 删除对应的git标签
              git push origin --delete "$TAG"
            fi
          done <<< "$OLD_TAGS"
